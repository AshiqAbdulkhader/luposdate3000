#!/bin/kscript
import kotlin.math.log2

val dataIn = arrayOf(
        doubleArrayOf(-1.0, 32.0, 128.0, 512.0, 2048.0, 8196.0, 32768.0, 131072.0),
        doubleArrayOf(0.0, 1849.62887196683985358337, 3407.79826924741501462286, 4298.15621992633819870290, 4743.63949098850805896913, 4992.69568621107319990853, 4811.09708409027927456353, 4827.29623620539759301355),
        doubleArrayOf(1.0, 965.24966085953165700355, 2000.74827985666639323106, 3017.99965172284019118424, 3498.27709852897448006856, 3550.34459644653110030859, 3479.60793169668814396669, 3569.48702545008554275656),
        doubleArrayOf(2.0, 934.82135704090151928101, 1977.92673324236188978240, 2418.36214005702497926254, 2783.13298950508380987527, 2849.94471107260519145928, 2867.97972338335567967534, 2833.75305939064674462699),
        doubleArrayOf(3.0, 950.48712940625635341240, 1835.17790122815610683891, 2295.42327031248744690399, 2420.01780649102016092634, 2423.10870307952885074377, 2441.39909746358164966313, 2381.76104553593672518335),
        doubleArrayOf(4.0, 904.71283916892716708806, 1333.34755570726087744935, 1783.58513096419720387359, 2082.69897793630356753838, 2126.59175392781496950467, 2069.66877641802838799087, 2087.55933626468415331620),
        doubleArrayOf(5.0, 871.32035966361806194826, 1131.89765698316902140995, 1586.67321433813116868795, 1892.93699775649107025900, 1887.69747911215546925422, 1832.60475077125170936208, 1798.44761598683248593479),
        doubleArrayOf(6.0, 852.73977187676170707246, 1184.28393633715900468514, 1500.54912595264236947510, 1686.18140614039820860087, 1634.90429106789659426547, 1619.32804039770048940951, 1630.67229357319435656932),
        doubleArrayOf(7.0, 843.05438265614568519287, 1157.51485265183180197976, 1435.72853531999876527345, 1461.43876893074709334443, 1508.50950210135373642718, 1525.05327011072496762311, 1502.30724346451279875632),
        doubleArrayOf(8.0, 786.80286119286867064306, 956.79881142624449386203, 1194.36712576148369061830, 1409.49750427324405858040, 1379.05146358042304058507, 1343.85120879416231034899, 1351.90654648577976820480),
        doubleArrayOf(9.0, 775.43376213786467874399, 916.60859951188758858792, 1233.81664398911675014670, 1253.07928570972092545920, 1281.72263522173801589336, 1272.49128343470847224696, 1186.40146639221246077460),
        doubleArrayOf(10.0, 755.97938111596769065081, 864.25321651280222610886, 1067.58689810384823440877, 1175.55973689092192802141, 1158.41673161523141922730, 1165.04410973503867829939, 1092.96318604889327094262),
        doubleArrayOf(11.0, 755.88115220173439953897, 877.28956126310396451539, 1094.35675242192092878495, 1079.58821482639519773251, 1085.97477693263600720956, 1081.12713125294201720592, 1042.65316861776616354828),
        doubleArrayOf(12.0, 662.65240674028823259205, 901.11359618216191569541, 989.59931123887937773995, 1029.08968990028738358680, 1002.81620875905806275764, 1009.03876747125399907289, 994.23571956865679847945),
        doubleArrayOf(13.0, 660.91101295848223107696, 862.49865342397734181537, 946.28426814705901000307, 989.10070370558665837668, 978.01921377426612372256, 931.48603506821365383408, 916.62489912542985124644),
        doubleArrayOf(14.0, 647.55632963000185460132, 746.84389371843791027402, 871.85729230593786255640, 895.13181666375599637614, 866.56524387052406053062, 855.58268988524154938838, 881.09670459259321915024),
        doubleArrayOf(15.0, 599.93922615639035765676, 802.24789861191057342674, 861.70177656193571997725, 824.52466153262644085684, 822.59070995665440512954, 821.79546201258694801436, 795.44730507623447654754),
        doubleArrayOf(16.0, 577.43268347519314545829, 688.98566840911142207330, 812.42542950088968708784, 830.01775822993732950916, 804.06160462714939737994, 765.24619117839495733369, 752.52489032514117178811),
        doubleArrayOf(17.0, 557.04320131836528542420, 701.64212322519624930186, 769.69862758116510512774, 774.91584995056424335240, 784.40859278824152693604, 773.20402681564349479869, 733.57867627635170490653),
        doubleArrayOf(18.0, 532.90337268149729647460, 658.86595727886778365530, 722.12359217492433047408, 746.10134070680418309177, 740.64292101272846704764, 674.00637138222867620767, 707.97101736567949075927),
        doubleArrayOf(19.0, 503.45399648830768369475, 631.08169485066997841511, 690.88552040744559034716, 675.51382621434080726334, 671.31728428528138196839, 666.92240917984016270772, 668.85444496585364287560),
        doubleArrayOf(20.0, 493.01034582210707691700, 635.26815685329828685965, 687.33784840983701432535, 682.36483359134684966144, 665.07089555986033777221, 667.88836806953946826201, 629.62276907338291150916),
)
val dataOut1 = Array(dataIn.size) { DoubleArray(dataIn[0].size) }
val dataOut2 = Array(dataIn.size) { DoubleArray(dataIn[0].size) }

var variables = doubleArrayOf(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)

inline fun mapX(x: Double) = log2(x)
inline fun mapZ(z: Double) = 1.0/(1.0+z)
inline fun f(x: Double, z: Double) = variables[0] + variables[1]*x + variables[2]*z+variables[3]*x*z+ variables[4]*x*x+variables[5]*z*z+variables[6]*x*x*z+variables[7]*x*z*z+variables[8]*x*x*z*z

var maxError = 0.0
var sumSquaredErrors = 0.0


inline fun calcErrors(p: Boolean) {
    maxError = 0.0
    sumSquaredErrors = 0.0
    for (zi in 1 until dataIn.size) {
        val z = dataIn[zi][0]
        for (xi in 1 until dataIn[0].size) {
            val x = dataIn[0][xi]
            val target = dataIn[zi][xi]
            val actual = f(mapX(x), mapZ(z))
            var error = target - actual
            if (p) {
                dataOut1[zi][xi] = actual
                dataOut2[zi][xi] = error
            }
            if (error < 0) {
                error = -error
            }
            if (error > maxError) {
                maxError = error
            }
            sumSquaredErrors += error * error
        }
    }
}
calcErrors(false)

var stepsize = 16.0

loop@ while (stepsize >= 1.0) {
    var lastMaxError = maxError
    var lastSumSquaredErrors = sumSquaredErrors
    println("loop $maxError $sumSquaredErrors ${variables.toList()}")
    for (i in 0 until variables.size) {
        var backup = variables[i]
        variables[i] = backup + stepsize
        calcErrors(false)
        if (sumSquaredErrors < lastSumSquaredErrors) {
            continue@loop
        } else {
            variables[i] = backup - stepsize
            calcErrors(false)
            if (sumSquaredErrors < lastSumSquaredErrors) {
                continue@loop
            } else {
                variables[i] = backup
            }
        }
    }
    stepsize = stepsize / 2.0
    if (stepsize < 0.000001) {
        break
    }
}
calcErrors(true)
println("xxxxxxxxxxxxx")
var row = "-1,"
for (xi in 1 until dataIn[0].size) {
    val x = dataIn[0][xi]
    row += "$x,"
}
println(row)
for (zi in 1 until dataIn.size) {
    val z = dataIn[zi][0]
    row = "$z,"
    for (xi in 1 until dataIn[0].size) {
        val x = dataIn[0][xi]
        val target = dataIn[zi][xi]
        row += "$target,"
    }
println(row)
}
println("xxxxxxxxxxxxx")
row = "-1,"
for (xi in 1 until dataIn[0].size) {
    val x = mapX(dataIn[0][xi])
    row +=  "$x,"
}
println(row)
for (zi in 1 until dataIn.size) {
    val z = mapZ(dataIn[zi][0])
    row =  "$z,"
    for (xi in 1 until dataIn[0].size) {
        val x = dataIn[0][xi]
        val target = dataOut1[zi][xi]
        row += "$target,"
    }
println(row)
}
println("xxxxxxxxxxxxx")
row = "-1,"
for (xi in 1 until dataIn[0].size) {
    val x = dataIn[0][xi]
    row += "$x,"
}
println(row)
for (zi in 1 until dataIn.size) {
    val z = dataIn[zi][0]
    row = "$z,"
    for (xi in 1 until dataIn[0].size) {
        val x = dataIn[0][xi]
        val target = dataOut2[zi][xi]
        row += "$target,"
    }
println(row)
}
