
import java.io.BufferedInputStream
import java.io.BufferedOutputStream
import java.io.DataInputStream
import java.io.DataOutputStream
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.InputStream
import kotlin.io.createTempFile
import kotlin.jvm.JvmField

class MyCharIterator(val file: File) : CharIterator() {
    val fis = FileInputStream(file.filename)
    val bis = BufferedInputStream(fis)
    val dis = DataInputStream(bis)
    override fun hasNext(): Boolean {
        val res = dis.available() > 0
        if (res == false) {
            dis.close()
        }
        return res
    }

    override fun nextChar(): Char {
        return dis.readChar()
    }
}

class MyInputStream(@JvmField val stream: InputStream) {
	inline fun read(buf:ByteArray):Int{
		return stream.read(buf,0,buf.size)
	}
}

class File(@JvmField val filename: String) {
    fun createTempFile(prefix: String, suffix: String, directory: String): String {
        var f = createTempFile(prefix, suffix, java.io.File(directory))
        return f.getAbsolutePath()
    }

    fun exists() = java.io.File(filename).exists()
    fun mkdirs() = java.io.File(filename).mkdirs()
    fun deleteRecursively() = java.io.File(filename).deleteRecursively()
    fun length() = java.io.File(filename).length()
    fun readAsString() = java.io.File(filename).readText()
    fun readAsCharIterator(): CharIterator = MyCharIterator(this)
    fun readAsInputStream(): MyInputStream = MyInputStream(FileInputStream(java.io.File(filename)))
    fun walk(action: (String) -> Unit) {
        java.io.File(filename).walk().forEach {
            action(filename + "/" + it.toRelativeString(java.io.File(filename)))
        }
    }

    fun printWriter(action: (java.io.PrintWriter) -> Unit) = java.io.File(filename).printWriter().use {
        action(it)
    }


    fun forEachLine(action: (String) -> Unit) = java.io.File(filename).forEachLine {
        action(it)
    }


    fun dataOutputStream(action: (java.io.DataOutputStream) -> Unit) {
        var dos: DataOutputStream? = null
        try {
            val fos = FileOutputStream(filename);
            val bos = BufferedOutputStream(fos)
            dos = DataOutputStream(bos)
            action(dos)
        } finally {
            dos?.close()
        }
    }


    fun dataInputStream(action: (java.io.DataInputStream) -> Unit) {
        var dis: DataInputStream? = null
        try {
            val fis = FileInputStream(filename)
            val bis = BufferedInputStream(fis)
            dis = DataInputStream(bis)
            action(dis)
        } finally {
            dis?.close()
        }
    }


}
