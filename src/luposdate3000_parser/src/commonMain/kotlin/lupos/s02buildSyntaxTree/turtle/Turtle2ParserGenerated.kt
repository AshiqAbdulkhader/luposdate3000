/*
 * This file is part of the Luposdate3000 distribution (https://github.com/luposdate3000/luposdate3000).
 * Copyright (c) 2020-2021, Institute of Information Systems (Benjamin Warnke and contributors of LUPOSDATE3000), University of Luebeck
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package lupos.s02buildSyntaxTree.turtle
import lupos.s00misc.IMyInputStream
import lupos.s00misc.Luposdate3000Exception
import kotlin.jvm.JvmField
internal open class ParserException(msg: String) : Luposdate3000Exception("ParserContext", msg)
internal class ParserExceptionEOF : ParserException("EOF")
internal class ParserExceptionUnexpectedChar(context: ParserContext) : ParserException("unexpected char 0x${context.c.toString(16)} at ${context.line}:${context.column}")
internal class ParserContext(@JvmField internal val input: IMyInputStream) {
    internal companion object {
        const val EOF = 0x7fffffff
    }
    @JvmField
    internal var c: Int = 0
    @JvmField
    internal var line = 1
    @JvmField
    internal var column = 0
    @JvmField
    internal val outBuffer = StringBuilder()
    @JvmField
    internal val inBuf = ByteArray(8192)
    @JvmField
    internal var inBufPosition = 0
    @JvmField
    internal var inBufSize = 0
    @JvmField
    internal var flagrN = false
    @Suppress("NOTHING_TO_INLINE") internal inline fun clear() {
        outBuffer.clear()
    }
    @Suppress("NOTHING_TO_INLINE") internal inline fun getValue(): String {
        return outBuffer.toString()
    }
    fun append() {
        if (c <= 0xd7ff || (c in 0xe000..0xffff)) {
            outBuffer.append(c.toChar())
            next()
        } else {
            c -= 0x100000
            outBuffer.append((0xd800 + ((c shr 10) and 0x03ff)).toChar())
            outBuffer.append((0xdc00 + (c and 0x03ff)).toChar())
            next()
        }
    }
    fun next() {
        if (inBufPosition >= inBufSize) {
            if (c == EOF) {
                throw ParserExceptionEOF()
            } else {
                inBufSize = input.read(inBuf)
                inBufPosition = 0
                if (inBufSize <= 0) {
                    c = EOF
                    return
                }
            }
        }
        val t: Int = inBuf[inBufPosition++].toInt() and 0xff
        if ((t and 0x80) == 0) {
            // 1byte
            c = t
            if ((c == '\r'.toInt()) || (c == '\n'.toInt())) {
                if (!flagrN) {
                    flagrN = true
                    line++
                    column = 1
                }
            } else {
                column++
                flagrN = false
            }
        } else if ((t and 0x20) == 0) {
            // 2byte
            flagrN = false
            c = (t and 0x1f) shl 6
            if (inBufPosition >= inBufSize) {
                inBufSize = input.read(inBuf)
                inBufPosition = 0
                if (inBufSize <= 0) {
                    c = EOF
                    return
                }
            }
            c = c or (inBuf[inBufPosition++].toInt() and 0x3f)
            column++
        } else if ((t and 0x10) == 0) {
            // 3byte
            flagrN = false
            c = (t and 0x0f) shl 12
            if (inBufPosition >= inBufSize) {
                inBufSize = input.read(inBuf)
                inBufPosition = 0
                if (inBufSize <= 0) {
                    c = EOF
                    return
                }
            }
            c = c or ((inBuf[inBufPosition++].toInt() and 0x3f) shl 6)
            if (inBufPosition >= inBufSize) {
                inBufSize = input.read(inBuf)
                inBufPosition = 0
                if (inBufSize <= 0) {
                    c = EOF
                    return
                }
            }
            c = c or (inBuf[inBufPosition++].toInt() and 0x3f)
            column++
        } else {
            // 4byte
            flagrN = false
            c = (t and 0x07) shl 18
            if (inBufPosition >= inBufSize) {
                inBufSize = input.read(inBuf)
                inBufPosition = 0
                if (inBufSize <= 0) {
                    c = EOF
                    return
                }
            }
            c = c or ((inBuf[inBufPosition++].toInt() and 0x3f) shl 12)
            if (inBufPosition >= inBufSize) {
                inBufSize = input.read(inBuf)
                inBufPosition = 0
                if (inBufSize <= 0) {
                    c = EOF
                    return
                }
            }
            c = c or ((inBuf[inBufPosition++].toInt() and 0x3f) shl 6)
            if (inBufPosition >= inBufSize) {
                inBufSize = input.read(inBuf)
                inBufPosition = 0
                if (inBufSize <= 0) {
                    c = EOF
                    return
                }
            }
            c = c or (inBuf[inBufPosition++].toInt() and 0x3f)
            column++
        }
    }
    init {
        next()
    }
}
internal inline fun parse_dot(
    context: ParserContext,
    crossinline onDOT: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_dot_helper_0(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                onDOT()
                return
            }
            else -> {
                break@error
            }
        }
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_ws(
    context: ParserContext,
    crossinline onSKIP_WS: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_ws_helper_1(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                onDOT()
                return
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS()
                return
            }
            else -> {
                onSKIP_WS()
                return
            }
        }
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
internal inline fun parse_ws_forced(
    context: ParserContext,
    crossinline onSKIP_WS_FORCED: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_ws_helper_1(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                onDOT()
                return
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            else -> {
                onSKIP_WS()
                return
            }
        }
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
internal inline fun parse_statement(
    context: ParserContext,
    crossinline onBASE: () -> Unit,
    crossinline onPREFIX: () -> Unit,
    crossinline onBASE2: () -> Unit,
    crossinline onPREFIX2: () -> Unit,
    crossinline onIRIREF: () -> Unit,
    crossinline onPNAME_NS: () -> Unit,
    crossinline onBLANK_NODE_LABEL: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_statement_helper_2(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                onDOT()
                return
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_statement_helper_10(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_statement_helper_22(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            else -> {
                onSKIP_WS()
                return
            }
        }
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_base(
    context: ParserContext,
    crossinline onIRIREF: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_statement_helper_2(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                onDOT()
                return
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_statement_helper_10(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_statement_helper_22(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            else -> {
                onSKIP_WS()
                return
            }
        }
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_prefix(
    context: ParserContext,
    crossinline onPNAME_NS: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_statement_helper_2(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                onDOT()
                return
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_statement_helper_10(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_statement_helper_22(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            else -> {
                onSKIP_WS()
                return
            }
        }
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_prefix2(
    context: ParserContext,
    crossinline onIRIREF: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_statement_helper_2(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                onDOT()
                return
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_statement_helper_10(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_statement_helper_22(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            else -> {
                onSKIP_WS()
                return
            }
        }
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_predicate(
    context: ParserContext,
    crossinline onVERB1: () -> Unit,
    crossinline onIRIREF: () -> Unit,
    crossinline onPNAME_NS: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_predicate_helper_25(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                onDOT()
                return
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_statement_helper_10(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_statement_helper_22(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            9 -> {
                context.append()
                onVERB1()
                return
            }
            else -> {
                onSKIP_WS()
                return
            }
        }
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
private fun parse_predicate_helper_25(c: Int): Int{
 if (c<0x9) {
  return 10
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 10
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 10
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 10
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 10
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 10
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 10
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 10
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 10
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 10
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 10
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 10
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 10
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 10
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 10
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 10
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 10
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 10
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 10
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 10
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 10
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 10
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 10
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 10
 }
}
internal inline fun parse_obj(
    context: ParserContext,
    crossinline onIRIREF: () -> Unit,
    crossinline onPNAME_NS: () -> Unit,
    crossinline onBLANK_NODE_LABEL: () -> Unit,
    crossinline onSTRING_LITERAL_QUOTE: () -> Unit,
    crossinline onSTRING_LITERAL_SINGLE_QUOTE: () -> Unit,
    crossinline onSTRING_LITERAL_LONG_SINGLE_QUOTE: () -> Unit,
    crossinline onSTRING_LITERAL_LONG_QUOTE: () -> Unit,
    crossinline onINTEGER: () -> Unit,
    crossinline onDECIMAL: () -> Unit,
    crossinline onDOUBLE: () -> Unit,
    crossinline onBOOLEAN: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_obj_helper_26(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                val localswitch3 = parse_obj_helper_27(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_28(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                onDECIMAL()
                                return
                            }
                        }
                    }
                    else -> {
                        onDOT()
                        return
                    }
                }
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_statement_helper_10(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_statement_helper_22(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            9 -> {
                context.append()
                onVERB1()
                return
            }
            10 -> {
                context.append()
                val localswitch3 = parse_obj_helper_30(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            val localswitch6 = parse_obj_helper_31(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    continue@loop5
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_obj_helper_32(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop5
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            continue@loop5
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        2 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            continue@loop5
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_33(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                onSTRING_LITERAL_QUOTE()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_32(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    val localswitch8 = parse_obj_helper_31(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_32(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop7
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop7
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                val localswitch7 = parse_obj_helper_33(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onSTRING_LITERAL_QUOTE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            1 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_20(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_20(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_20(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_20(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                loop15@ while(true) {
                                                                    val localswitch16 = parse_obj_helper_31(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            continue@loop15
                                                                        }
                                                                        1 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_obj_helper_32(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop15
                                                                                }
                                                                                1 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop15
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                2 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    continue@loop15
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@loop15
                                                                        }
                                                                    }
                                                                }
                                                                val localswitch15 = parse_obj_helper_33(context.c)
                                                                when (localswitch15) {
                                                                    0 -> {
                                                                        context.append()
                                                                        onSTRING_LITERAL_QUOTE()
                                                                        return
                                                                    }
                                                                    else -> {
                                                                        break@error
                                                                    }
                                                                }
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            2 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_20(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_20(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_20(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_20(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                val localswitch15 = parse_statement_helper_20(context.c)
                                                                when (localswitch15) {
                                                                    0 -> {
                                                                        context.append()
                                                                        val localswitch17 = parse_statement_helper_20(context.c)
                                                                        when (localswitch17) {
                                                                            0 -> {
                                                                                context.append()
                                                                                val localswitch19 = parse_statement_helper_20(context.c)
                                                                                when (localswitch19) {
                                                                                    0 -> {
                                                                                        context.append()
                                                                                        val localswitch21 = parse_statement_helper_20(context.c)
                                                                                        when (localswitch21) {
                                                                                            0 -> {
                                                                                                context.append()
                                                                                                loop23@ while(true) {
                                                                                                    val localswitch24 = parse_obj_helper_31(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            continue@loop23
                                                                                                        }
                                                                                                        1 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_obj_helper_32(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop23
                                                                                                                }
                                                                                                                1 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    continue@loop23
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                2 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    val localswitch36 = parse_statement_helper_20(context.c)
                                                                                                                                                    when (localswitch36) {
                                                                                                                                                        0 -> {
                                                                                                                                                            context.append()
                                                                                                                                                            val localswitch38 = parse_statement_helper_20(context.c)
                                                                                                                                                            when (localswitch38) {
                                                                                                                                                                0 -> {
                                                                                                                                                                    context.append()
                                                                                                                                                                    val localswitch40 = parse_statement_helper_20(context.c)
                                                                                                                                                                    when (localswitch40) {
                                                                                                                                                                        0 -> {
                                                                                                                                                                            context.append()
                                                                                                                                                                            val localswitch42 = parse_statement_helper_20(context.c)
                                                                                                                                                                            when (localswitch42) {
                                                                                                                                                                                0 -> {
                                                                                                                                                                                    context.append()
                                                                                                                                                                                    continue@loop23
                                                                                                                                                                                }
                                                                                                                                                                                else -> {
                                                                                                                                                                                    break@error
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else -> {
                                                                                                                                                                            break@error
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else -> {
                                                                                                                                                                    break@error
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else -> {
                                                                                                                                                            break@error
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@loop23
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                val localswitch23 = parse_obj_helper_33(context.c)
                                                                                                when (localswitch23) {
                                                                                                    0 -> {
                                                                                                        context.append()
                                                                                                        onSTRING_LITERAL_QUOTE()
                                                                                                        return
                                                                                                    }
                                                                                                    else -> {
                                                                                                        break@error
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else -> {
                                                                                                break@error
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else -> {
                                                                                        break@error
                                                                                    }
                                                                                }
                                                                            }
                                                                            else -> {
                                                                                break@error
                                                                            }
                                                                        }
                                                                    }
                                                                    else -> {
                                                                        break@error
                                                                    }
                                                                }
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    2 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_33(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    val localswitch8 = parse_obj_helper_34(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_32(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop7
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop7
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        2 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_34(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_obj_helper_32(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            continue@loop7
                                                        }
                                                        1 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            continue@loop7
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        2 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            continue@loop7
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_obj_helper_34(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            continue@loop7
                                                        }
                                                        1 -> {
                                                            context.append()
                                                            val localswitch14 = parse_obj_helper_32(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop7
                                                                }
                                                                1 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop7
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                2 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    continue@loop7
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        2 -> {
                                                            context.append()
                                                            onSTRING_LITERAL_LONG_QUOTE()
                                                            return
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                break@error
                            }
                            else -> {
                                onSTRING_LITERAL_QUOTE()
                                return
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            11 -> {
                context.append()
                val localswitch3 = parse_obj_helper_35(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            val localswitch6 = parse_obj_helper_36(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    continue@loop5
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_obj_helper_32(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop5
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            continue@loop5
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        2 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            continue@loop5
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_37(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                onSTRING_LITERAL_SINGLE_QUOTE()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_32(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    val localswitch8 = parse_obj_helper_36(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_32(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop7
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop7
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                val localswitch7 = parse_obj_helper_37(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onSTRING_LITERAL_SINGLE_QUOTE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            1 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_20(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_20(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_20(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_20(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                loop15@ while(true) {
                                                                    val localswitch16 = parse_obj_helper_36(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            continue@loop15
                                                                        }
                                                                        1 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_obj_helper_32(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop15
                                                                                }
                                                                                1 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop15
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                2 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    continue@loop15
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@loop15
                                                                        }
                                                                    }
                                                                }
                                                                val localswitch15 = parse_obj_helper_37(context.c)
                                                                when (localswitch15) {
                                                                    0 -> {
                                                                        context.append()
                                                                        onSTRING_LITERAL_SINGLE_QUOTE()
                                                                        return
                                                                    }
                                                                    else -> {
                                                                        break@error
                                                                    }
                                                                }
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            2 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_20(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_20(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_20(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_20(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                val localswitch15 = parse_statement_helper_20(context.c)
                                                                when (localswitch15) {
                                                                    0 -> {
                                                                        context.append()
                                                                        val localswitch17 = parse_statement_helper_20(context.c)
                                                                        when (localswitch17) {
                                                                            0 -> {
                                                                                context.append()
                                                                                val localswitch19 = parse_statement_helper_20(context.c)
                                                                                when (localswitch19) {
                                                                                    0 -> {
                                                                                        context.append()
                                                                                        val localswitch21 = parse_statement_helper_20(context.c)
                                                                                        when (localswitch21) {
                                                                                            0 -> {
                                                                                                context.append()
                                                                                                loop23@ while(true) {
                                                                                                    val localswitch24 = parse_obj_helper_36(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            continue@loop23
                                                                                                        }
                                                                                                        1 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_obj_helper_32(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop23
                                                                                                                }
                                                                                                                1 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    continue@loop23
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                2 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    val localswitch36 = parse_statement_helper_20(context.c)
                                                                                                                                                    when (localswitch36) {
                                                                                                                                                        0 -> {
                                                                                                                                                            context.append()
                                                                                                                                                            val localswitch38 = parse_statement_helper_20(context.c)
                                                                                                                                                            when (localswitch38) {
                                                                                                                                                                0 -> {
                                                                                                                                                                    context.append()
                                                                                                                                                                    val localswitch40 = parse_statement_helper_20(context.c)
                                                                                                                                                                    when (localswitch40) {
                                                                                                                                                                        0 -> {
                                                                                                                                                                            context.append()
                                                                                                                                                                            val localswitch42 = parse_statement_helper_20(context.c)
                                                                                                                                                                            when (localswitch42) {
                                                                                                                                                                                0 -> {
                                                                                                                                                                                    context.append()
                                                                                                                                                                                    continue@loop23
                                                                                                                                                                                }
                                                                                                                                                                                else -> {
                                                                                                                                                                                    break@error
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else -> {
                                                                                                                                                                            break@error
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else -> {
                                                                                                                                                                    break@error
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else -> {
                                                                                                                                                            break@error
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@loop23
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                val localswitch23 = parse_obj_helper_37(context.c)
                                                                                                when (localswitch23) {
                                                                                                    0 -> {
                                                                                                        context.append()
                                                                                                        onSTRING_LITERAL_SINGLE_QUOTE()
                                                                                                        return
                                                                                                    }
                                                                                                    else -> {
                                                                                                        break@error
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else -> {
                                                                                                break@error
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else -> {
                                                                                        break@error
                                                                                    }
                                                                                }
                                                                            }
                                                                            else -> {
                                                                                break@error
                                                                            }
                                                                        }
                                                                    }
                                                                    else -> {
                                                                        break@error
                                                                    }
                                                                }
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    2 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_37(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    val localswitch8 = parse_obj_helper_38(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_32(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop7
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop7
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        2 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_38(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_obj_helper_32(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            continue@loop7
                                                        }
                                                        1 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            continue@loop7
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        2 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            continue@loop7
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_obj_helper_38(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            continue@loop7
                                                        }
                                                        1 -> {
                                                            context.append()
                                                            val localswitch14 = parse_obj_helper_32(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop7
                                                                }
                                                                1 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop7
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                2 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    continue@loop7
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        2 -> {
                                                            context.append()
                                                            onSTRING_LITERAL_LONG_SINGLE_QUOTE()
                                                            return
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                break@error
                            }
                            else -> {
                                onSTRING_LITERAL_SINGLE_QUOTE()
                                return
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            12 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_obj_helper_39(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_40(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    when (context.c) {
                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                            context.append()
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                val localswitch7 = parse_obj_helper_28(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_29(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            1 -> {
                                                context.append()
                                                val localswitch11 = parse_obj_helper_27(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        loop13@ while(true) {
                                                            when (context.c) {
                                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                                    context.append()
                                                                }
                                                                else -> {
                                                                    break@loop13
                                                                }
                                                            }
                                                        }
                                                        onDOUBLE()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        onDECIMAL()
                                        return
                                    }
                                }
                            }
                            1 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_29(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    when (context.c) {
                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                            context.append()
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onDOUBLE()
                                return
                            }
                            1 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_27(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        onINTEGER()
                        return
                    }
                }
            }
            13 -> {
                context.append()
                val localswitch3 = parse_obj_helper_41(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_39(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_40(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        val localswitch9 = parse_obj_helper_28(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_obj_helper_29(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        loop13@ while(true) {
                                                            when (context.c) {
                                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                                    context.append()
                                                                }
                                                                else -> {
                                                                    break@loop13
                                                                }
                                                            }
                                                        }
                                                        onDOUBLE()
                                                        return
                                                    }
                                                    1 -> {
                                                        context.append()
                                                        val localswitch13 = parse_obj_helper_27(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                loop15@ while(true) {
                                                                    when (context.c) {
                                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                                            context.append()
                                                                        }
                                                                        else -> {
                                                                            break@loop15
                                                                        }
                                                                    }
                                                                }
                                                                onDOUBLE()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                onDECIMAL()
                                                return
                                            }
                                        }
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_29(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            1 -> {
                                                context.append()
                                                val localswitch11 = parse_obj_helper_27(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        loop13@ while(true) {
                                                            when (context.c) {
                                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                                    context.append()
                                                                }
                                                                else -> {
                                                                    break@loop13
                                                                }
                                                            }
                                                        }
                                                        onDOUBLE()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            1 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                onINTEGER()
                                return
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_27(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    when (context.c) {
                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                            context.append()
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                val localswitch7 = parse_obj_helper_28(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_29(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            1 -> {
                                                context.append()
                                                val localswitch11 = parse_obj_helper_27(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        loop13@ while(true) {
                                                            when (context.c) {
                                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                                    context.append()
                                                                }
                                                                else -> {
                                                                    break@loop13
                                                                }
                                                            }
                                                        }
                                                        onDOUBLE()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        onDECIMAL()
                                        return
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            14 -> {
                context.append()
                val localswitch3 = parse_statement_helper_14(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_42(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_11(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_obj_helper_43(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                val localswitch15 = parse_statement_helper_12(context.c)
                                                                when (localswitch15) {
                                                                    0 -> {
                                                                        context.append()
                                                                        val localswitch17 = parse_statement_helper_13(context.c)
                                                                        when (localswitch17) {
                                                                            0 -> {
                                                                                context.append()
                                                                                onBOOLEAN()
                                                                                return
                                                                            }
                                                                            else -> {
                                                                                break@error
                                                                            }
                                                                        }
                                                                    }
                                                                    else -> {
                                                                        break@error
                                                                    }
                                                                }
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            else -> {
                onSKIP_WS()
                return
            }
        }
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
private fun parse_predicate_helper_25(c: Int): Int{
 if (c<0x9) {
  return 10
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 10
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 10
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 10
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 10
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 10
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 10
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 10
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 10
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 10
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 10
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 10
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 10
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 10
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 10
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 10
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 10
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 10
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 10
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 10
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 10
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 10
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 10
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 10
 }
}
private fun parse_obj_helper_26(c: Int): Int{
 if (c<0x9) {
  return 15
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 15
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 15
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 15
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 15
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 15
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2d) {
  return 15
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 15
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 15
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 15
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 15
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 15
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 15
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 15
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 15
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 15
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 15
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 15
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 15
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 15
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 15
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 15
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 15
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 15
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 15
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 15
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 15
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 15
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 15
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_27(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_28(c: Int): Int{
 if (c<0x45) {
  return 1
 } else if (c<=0x45) {
  return 0
 } else if (c<0x65) {
  return 1
 } else if (c<=0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_29(c: Int): Int{
 if (c<0x2b) {
  return 2
 } else if (c<=0x2b) {
  return 1
 } else if (c<0x2d) {
  return 2
 } else if (c<=0x2d) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_30(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_31(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_32(c: Int): Int{
 if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 0
 } else if (c<0x55) {
  return 3
 } else if (c<=0x55) {
  return 2
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 0
 } else if (c<0x62) {
  return 3
 } else if (c<=0x62) {
  return 0
 } else if (c<0x66) {
  return 3
 } else if (c<=0x66) {
  return 0
 } else if (c<0x6e) {
  return 3
 } else if (c<=0x6e) {
  return 0
 } else if (c<0x72) {
  return 3
 } else if (c<=0x72) {
  return 0
 } else if (c<0x74) {
  return 3
 } else if (c<=0x74) {
  return 0
 } else if (c<0x75) {
  return 3
 } else if (c<=0x75) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_33(c: Int): Int{
 if (c==0x22) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_34(c: Int): Int{
 if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_35(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_36(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x26) {
  return 0
 } else if (c<0x28) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_37(c: Int): Int{
 if (c==0x27) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_38(c: Int): Int{
 if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_39(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_40(c: Int): Int{
 if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_41(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_42(c: Int): Int{
 if (c==0x75) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_43(c: Int): Int{
 if (c==0x6c) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_triple_end(
    context: ParserContext,
    crossinline onPREDICATE_LIST1: () -> Unit,
    crossinline onOBJECT_LIST1: () -> Unit,
    crossinline onDOT: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_triple_end_helper_44(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                val localswitch3 = parse_obj_helper_27(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_28(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                onDECIMAL()
                                return
                            }
                        }
                    }
                    else -> {
                        onDOT()
                        return
                    }
                }
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_statement_helper_10(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_statement_helper_22(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            9 -> {
                context.append()
                onVERB1()
                return
            }
            10 -> {
                context.append()
                val localswitch3 = parse_obj_helper_30(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            val localswitch6 = parse_obj_helper_31(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    continue@loop5
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_obj_helper_32(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop5
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            continue@loop5
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        2 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            continue@loop5
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_33(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                onSTRING_LITERAL_QUOTE()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_32(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    val localswitch8 = parse_obj_helper_31(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_32(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop7
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop7
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                val localswitch7 = parse_obj_helper_33(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onSTRING_LITERAL_QUOTE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            1 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_20(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_20(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_20(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_20(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                loop15@ while(true) {
                                                                    val localswitch16 = parse_obj_helper_31(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            continue@loop15
                                                                        }
                                                                        1 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_obj_helper_32(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop15
                                                                                }
                                                                                1 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop15
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                2 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    continue@loop15
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@loop15
                                                                        }
                                                                    }
                                                                }
                                                                val localswitch15 = parse_obj_helper_33(context.c)
                                                                when (localswitch15) {
                                                                    0 -> {
                                                                        context.append()
                                                                        onSTRING_LITERAL_QUOTE()
                                                                        return
                                                                    }
                                                                    else -> {
                                                                        break@error
                                                                    }
                                                                }
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            2 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_20(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_20(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_20(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_20(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                val localswitch15 = parse_statement_helper_20(context.c)
                                                                when (localswitch15) {
                                                                    0 -> {
                                                                        context.append()
                                                                        val localswitch17 = parse_statement_helper_20(context.c)
                                                                        when (localswitch17) {
                                                                            0 -> {
                                                                                context.append()
                                                                                val localswitch19 = parse_statement_helper_20(context.c)
                                                                                when (localswitch19) {
                                                                                    0 -> {
                                                                                        context.append()
                                                                                        val localswitch21 = parse_statement_helper_20(context.c)
                                                                                        when (localswitch21) {
                                                                                            0 -> {
                                                                                                context.append()
                                                                                                loop23@ while(true) {
                                                                                                    val localswitch24 = parse_obj_helper_31(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            continue@loop23
                                                                                                        }
                                                                                                        1 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_obj_helper_32(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop23
                                                                                                                }
                                                                                                                1 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    continue@loop23
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                2 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    val localswitch36 = parse_statement_helper_20(context.c)
                                                                                                                                                    when (localswitch36) {
                                                                                                                                                        0 -> {
                                                                                                                                                            context.append()
                                                                                                                                                            val localswitch38 = parse_statement_helper_20(context.c)
                                                                                                                                                            when (localswitch38) {
                                                                                                                                                                0 -> {
                                                                                                                                                                    context.append()
                                                                                                                                                                    val localswitch40 = parse_statement_helper_20(context.c)
                                                                                                                                                                    when (localswitch40) {
                                                                                                                                                                        0 -> {
                                                                                                                                                                            context.append()
                                                                                                                                                                            val localswitch42 = parse_statement_helper_20(context.c)
                                                                                                                                                                            when (localswitch42) {
                                                                                                                                                                                0 -> {
                                                                                                                                                                                    context.append()
                                                                                                                                                                                    continue@loop23
                                                                                                                                                                                }
                                                                                                                                                                                else -> {
                                                                                                                                                                                    break@error
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else -> {
                                                                                                                                                                            break@error
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else -> {
                                                                                                                                                                    break@error
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else -> {
                                                                                                                                                            break@error
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@loop23
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                val localswitch23 = parse_obj_helper_33(context.c)
                                                                                                when (localswitch23) {
                                                                                                    0 -> {
                                                                                                        context.append()
                                                                                                        onSTRING_LITERAL_QUOTE()
                                                                                                        return
                                                                                                    }
                                                                                                    else -> {
                                                                                                        break@error
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else -> {
                                                                                                break@error
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else -> {
                                                                                        break@error
                                                                                    }
                                                                                }
                                                                            }
                                                                            else -> {
                                                                                break@error
                                                                            }
                                                                        }
                                                                    }
                                                                    else -> {
                                                                        break@error
                                                                    }
                                                                }
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    2 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_33(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    val localswitch8 = parse_obj_helper_34(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_32(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop7
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop7
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        2 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_34(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_obj_helper_32(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            continue@loop7
                                                        }
                                                        1 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            continue@loop7
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        2 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            continue@loop7
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_obj_helper_34(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            continue@loop7
                                                        }
                                                        1 -> {
                                                            context.append()
                                                            val localswitch14 = parse_obj_helper_32(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop7
                                                                }
                                                                1 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop7
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                2 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    continue@loop7
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        2 -> {
                                                            context.append()
                                                            onSTRING_LITERAL_LONG_QUOTE()
                                                            return
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                break@error
                            }
                            else -> {
                                onSTRING_LITERAL_QUOTE()
                                return
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            11 -> {
                context.append()
                val localswitch3 = parse_obj_helper_35(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            val localswitch6 = parse_obj_helper_36(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    continue@loop5
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_obj_helper_32(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop5
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            continue@loop5
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        2 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            continue@loop5
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_37(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                onSTRING_LITERAL_SINGLE_QUOTE()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_32(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    val localswitch8 = parse_obj_helper_36(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_32(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop7
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop7
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                val localswitch7 = parse_obj_helper_37(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onSTRING_LITERAL_SINGLE_QUOTE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            1 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_20(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_20(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_20(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_20(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                loop15@ while(true) {
                                                                    val localswitch16 = parse_obj_helper_36(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            continue@loop15
                                                                        }
                                                                        1 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_obj_helper_32(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop15
                                                                                }
                                                                                1 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop15
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                2 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    continue@loop15
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@loop15
                                                                        }
                                                                    }
                                                                }
                                                                val localswitch15 = parse_obj_helper_37(context.c)
                                                                when (localswitch15) {
                                                                    0 -> {
                                                                        context.append()
                                                                        onSTRING_LITERAL_SINGLE_QUOTE()
                                                                        return
                                                                    }
                                                                    else -> {
                                                                        break@error
                                                                    }
                                                                }
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            2 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_20(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_20(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_20(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_20(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                val localswitch15 = parse_statement_helper_20(context.c)
                                                                when (localswitch15) {
                                                                    0 -> {
                                                                        context.append()
                                                                        val localswitch17 = parse_statement_helper_20(context.c)
                                                                        when (localswitch17) {
                                                                            0 -> {
                                                                                context.append()
                                                                                val localswitch19 = parse_statement_helper_20(context.c)
                                                                                when (localswitch19) {
                                                                                    0 -> {
                                                                                        context.append()
                                                                                        val localswitch21 = parse_statement_helper_20(context.c)
                                                                                        when (localswitch21) {
                                                                                            0 -> {
                                                                                                context.append()
                                                                                                loop23@ while(true) {
                                                                                                    val localswitch24 = parse_obj_helper_36(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            continue@loop23
                                                                                                        }
                                                                                                        1 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_obj_helper_32(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop23
                                                                                                                }
                                                                                                                1 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    continue@loop23
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                2 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    val localswitch32 = parse_statement_helper_20(context.c)
                                                                                                                                    when (localswitch32) {
                                                                                                                                        0 -> {
                                                                                                                                            context.append()
                                                                                                                                            val localswitch34 = parse_statement_helper_20(context.c)
                                                                                                                                            when (localswitch34) {
                                                                                                                                                0 -> {
                                                                                                                                                    context.append()
                                                                                                                                                    val localswitch36 = parse_statement_helper_20(context.c)
                                                                                                                                                    when (localswitch36) {
                                                                                                                                                        0 -> {
                                                                                                                                                            context.append()
                                                                                                                                                            val localswitch38 = parse_statement_helper_20(context.c)
                                                                                                                                                            when (localswitch38) {
                                                                                                                                                                0 -> {
                                                                                                                                                                    context.append()
                                                                                                                                                                    val localswitch40 = parse_statement_helper_20(context.c)
                                                                                                                                                                    when (localswitch40) {
                                                                                                                                                                        0 -> {
                                                                                                                                                                            context.append()
                                                                                                                                                                            val localswitch42 = parse_statement_helper_20(context.c)
                                                                                                                                                                            when (localswitch42) {
                                                                                                                                                                                0 -> {
                                                                                                                                                                                    context.append()
                                                                                                                                                                                    continue@loop23
                                                                                                                                                                                }
                                                                                                                                                                                else -> {
                                                                                                                                                                                    break@error
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        else -> {
                                                                                                                                                                            break@error
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                else -> {
                                                                                                                                                                    break@error
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        else -> {
                                                                                                                                                            break@error
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                else -> {
                                                                                                                                                    break@error
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        else -> {
                                                                                                                                            break@error
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@loop23
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                val localswitch23 = parse_obj_helper_37(context.c)
                                                                                                when (localswitch23) {
                                                                                                    0 -> {
                                                                                                        context.append()
                                                                                                        onSTRING_LITERAL_SINGLE_QUOTE()
                                                                                                        return
                                                                                                    }
                                                                                                    else -> {
                                                                                                        break@error
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else -> {
                                                                                                break@error
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else -> {
                                                                                        break@error
                                                                                    }
                                                                                }
                                                                            }
                                                                            else -> {
                                                                                break@error
                                                                            }
                                                                        }
                                                                    }
                                                                    else -> {
                                                                        break@error
                                                                    }
                                                                }
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    2 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_37(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    val localswitch8 = parse_obj_helper_38(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        1 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_32(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    continue@loop7
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    continue@loop7
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        2 -> {
                                            context.append()
                                            val localswitch10 = parse_obj_helper_38(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    continue@loop7
                                                }
                                                1 -> {
                                                    context.append()
                                                    val localswitch12 = parse_obj_helper_32(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            continue@loop7
                                                        }
                                                        1 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            continue@loop7
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        2 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            continue@loop7
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                2 -> {
                                                    context.append()
                                                    val localswitch12 = parse_obj_helper_38(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            continue@loop7
                                                        }
                                                        1 -> {
                                                            context.append()
                                                            val localswitch14 = parse_obj_helper_32(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop7
                                                                }
                                                                1 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop7
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                2 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    val localswitch24 = parse_statement_helper_20(context.c)
                                                                                                    when (localswitch24) {
                                                                                                        0 -> {
                                                                                                            context.append()
                                                                                                            val localswitch26 = parse_statement_helper_20(context.c)
                                                                                                            when (localswitch26) {
                                                                                                                0 -> {
                                                                                                                    context.append()
                                                                                                                    val localswitch28 = parse_statement_helper_20(context.c)
                                                                                                                    when (localswitch28) {
                                                                                                                        0 -> {
                                                                                                                            context.append()
                                                                                                                            val localswitch30 = parse_statement_helper_20(context.c)
                                                                                                                            when (localswitch30) {
                                                                                                                                0 -> {
                                                                                                                                    context.append()
                                                                                                                                    continue@loop7
                                                                                                                                }
                                                                                                                                else -> {
                                                                                                                                    break@error
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else -> {
                                                                                                                            break@error
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                else -> {
                                                                                                                    break@error
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else -> {
                                                                                                            break@error
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        2 -> {
                                                            context.append()
                                                            onSTRING_LITERAL_LONG_SINGLE_QUOTE()
                                                            return
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                break@error
                            }
                            else -> {
                                onSTRING_LITERAL_SINGLE_QUOTE()
                                return
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            12 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_obj_helper_39(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_40(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    when (context.c) {
                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                            context.append()
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                val localswitch7 = parse_obj_helper_28(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_29(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            1 -> {
                                                context.append()
                                                val localswitch11 = parse_obj_helper_27(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        loop13@ while(true) {
                                                            when (context.c) {
                                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                                    context.append()
                                                                }
                                                                else -> {
                                                                    break@loop13
                                                                }
                                                            }
                                                        }
                                                        onDOUBLE()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        onDECIMAL()
                                        return
                                    }
                                }
                            }
                            1 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_29(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    when (context.c) {
                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                            context.append()
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onDOUBLE()
                                return
                            }
                            1 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_27(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        onINTEGER()
                        return
                    }
                }
            }
            13 -> {
                context.append()
                val localswitch3 = parse_obj_helper_41(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_39(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_40(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        val localswitch9 = parse_obj_helper_28(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_obj_helper_29(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        loop13@ while(true) {
                                                            when (context.c) {
                                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                                    context.append()
                                                                }
                                                                else -> {
                                                                    break@loop13
                                                                }
                                                            }
                                                        }
                                                        onDOUBLE()
                                                        return
                                                    }
                                                    1 -> {
                                                        context.append()
                                                        val localswitch13 = parse_obj_helper_27(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                loop15@ while(true) {
                                                                    when (context.c) {
                                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                                            context.append()
                                                                        }
                                                                        else -> {
                                                                            break@loop15
                                                                        }
                                                                    }
                                                                }
                                                                onDOUBLE()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                onDECIMAL()
                                                return
                                            }
                                        }
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_29(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            1 -> {
                                                context.append()
                                                val localswitch11 = parse_obj_helper_27(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        loop13@ while(true) {
                                                            when (context.c) {
                                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                                    context.append()
                                                                }
                                                                else -> {
                                                                    break@loop13
                                                                }
                                                            }
                                                        }
                                                        onDOUBLE()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            1 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                onINTEGER()
                                return
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_27(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    when (context.c) {
                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                            context.append()
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                val localswitch7 = parse_obj_helper_28(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_29(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            1 -> {
                                                context.append()
                                                val localswitch11 = parse_obj_helper_27(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        loop13@ while(true) {
                                                            when (context.c) {
                                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                                    context.append()
                                                                }
                                                                else -> {
                                                                    break@loop13
                                                                }
                                                            }
                                                        }
                                                        onDOUBLE()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        onDECIMAL()
                                        return
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            14 -> {
                context.append()
                val localswitch3 = parse_statement_helper_14(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_obj_helper_42(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_11(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_obj_helper_43(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                val localswitch15 = parse_statement_helper_12(context.c)
                                                                when (localswitch15) {
                                                                    0 -> {
                                                                        context.append()
                                                                        val localswitch17 = parse_statement_helper_13(context.c)
                                                                        when (localswitch17) {
                                                                            0 -> {
                                                                                context.append()
                                                                                onBOOLEAN()
                                                                                return
                                                                            }
                                                                            else -> {
                                                                                break@error
                                                                            }
                                                                        }
                                                                    }
                                                                    else -> {
                                                                        break@error
                                                                    }
                                                                }
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            15 -> {
                context.append()
                onPREDICATE_LIST1()
                return
            }
            16 -> {
                context.append()
                onOBJECT_LIST1()
                return
            }
            else -> {
                onSKIP_WS()
                return
            }
        }
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
private fun parse_predicate_helper_25(c: Int): Int{
 if (c<0x9) {
  return 10
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 10
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 10
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 10
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 10
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 10
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 10
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 10
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 10
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 10
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 10
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 10
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 10
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 10
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 10
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 10
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 10
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 10
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 10
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 10
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 10
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 10
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 10
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 10
 }
}
private fun parse_obj_helper_26(c: Int): Int{
 if (c<0x9) {
  return 15
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 15
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 15
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 15
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 15
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 15
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2d) {
  return 15
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 15
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 15
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 15
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 15
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 15
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 15
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 15
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 15
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 15
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 15
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 15
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 15
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 15
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 15
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 15
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 15
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 15
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 15
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 15
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 15
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 15
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 15
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_27(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_28(c: Int): Int{
 if (c<0x45) {
  return 1
 } else if (c<=0x45) {
  return 0
 } else if (c<0x65) {
  return 1
 } else if (c<=0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_29(c: Int): Int{
 if (c<0x2b) {
  return 2
 } else if (c<=0x2b) {
  return 1
 } else if (c<0x2d) {
  return 2
 } else if (c<=0x2d) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_30(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_31(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_32(c: Int): Int{
 if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 0
 } else if (c<0x55) {
  return 3
 } else if (c<=0x55) {
  return 2
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 0
 } else if (c<0x62) {
  return 3
 } else if (c<=0x62) {
  return 0
 } else if (c<0x66) {
  return 3
 } else if (c<=0x66) {
  return 0
 } else if (c<0x6e) {
  return 3
 } else if (c<=0x6e) {
  return 0
 } else if (c<0x72) {
  return 3
 } else if (c<=0x72) {
  return 0
 } else if (c<0x74) {
  return 3
 } else if (c<=0x74) {
  return 0
 } else if (c<0x75) {
  return 3
 } else if (c<=0x75) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_33(c: Int): Int{
 if (c==0x22) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_34(c: Int): Int{
 if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_35(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_36(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x26) {
  return 0
 } else if (c<0x28) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_37(c: Int): Int{
 if (c==0x27) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_38(c: Int): Int{
 if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_39(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_40(c: Int): Int{
 if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_41(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_42(c: Int): Int{
 if (c==0x75) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_43(c: Int): Int{
 if (c==0x6c) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_helper_44(c: Int): Int{
 if (c<0x9) {
  return 17
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 17
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 17
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 17
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 17
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 17
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 17
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 17
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 17
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 17
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 17
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 17
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 17
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 17
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 17
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 17
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 17
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 17
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 17
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 17
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 17
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 17
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 17
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 17
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 17
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 17
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 17
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 17
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 17
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 17
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 17
 }
}
internal inline fun parse_triple_end_or_object_iri(
    context: ParserContext,
    crossinline onPN_LOCAL: () -> Unit,
    crossinline onPREDICATE_LIST1: () -> Unit,
    crossinline onOBJECT_LIST1: () -> Unit,
    crossinline onDOT: () -> Unit,
    crossinline onSKIP_WS_FORCED: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_triple_end_or_object_iri_helper_45(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                val localswitch3 = parse_obj_helper_27(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_28(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                onDECIMAL()
                                return
                            }
                        }
                    }
                    else -> {
                        onDOT()
                        return
                    }
                }
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_statement_helper_10(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_triple_end_or_object_iri_helper_46(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_20(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop3
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        2 -> {
                            context.append()
                            val localswitch6 = parse_triple_end_or_object_iri_helper_47(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    continue@loop3
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
xxx + ANY null [MyPair(first=46, second=46)]
    
            0x2e
                    onAction(DOT)
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(DECIMAL)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
            0x9,0xa,0xd,0x20
                    0x9,0xa,0xd,0x20*
                            onAction(SKIP_WS_FORCED)
            onAction(SKIP_WS)
            0x42
                    0x41
                            0x53
                                    0x45
                                            onAction(BASE)
            0x50
                    0x52
                            0x45
                                    0x46
                                            0x49
                                                    0x58
                                                            onAction(PREFIX)
            0x40
                    0x62
                            0x61
                                    0x73
                                            0x65
                                                    onAction(BASE2)
                    0x70
                            0x72
                                    0x65
                                            0x66
                                                    0x69
                                                            0x78
                                                                    onAction(PREFIX2)
            0x3c
                    ANY start(1)
                                    
                                            0x3e
                                                    onAction(IRIREF)
                            0x21,in (0x23..0x3b),0x3d,in (0x3f..0x5b),0x5d,0x5f,in (0x61..0x7a),in (0x7e..0x1fffff)
                                     end(1)
                            0x5c
                                    0x75
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(1)
                                    0x55
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(1)
            in (0x30..0x3a),in (0x41..0x5a),in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                    ANY start(2)
                                    
                                            0x3a
                                                    onAction(PNAME_NS)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x3a
                    onAction(PNAME_NS)
            0x5f
                    0x3a
                            in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                    ANY start(3)
                                                    
                                                            onAction(BLANK_NODE_LABEL)
                                            0x2e*
                                                    0x2d,in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(3)
                    ANY start(2)
                                    
                                            onAction(PN_LOCAL)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x61
                    onAction(VERB1)
            0x22
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x22
                                                            onAction(STRING_LITERAL_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(17)
                                                    
                                                            0x22
                                                                    onAction(STRING_LITERAL_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(17)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(17)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(17)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(17)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(20)
                                                                                    
                                                                                            0x22
                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                     end(20)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(20)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(20)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(20)
                                                                                                                    
                                                                                                                            0x22
                                                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(20)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(20)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(20)
                    0x22
                            onAction(STRING_LITERAL_QUOTE)
                            0x22
                                    ANY start(36)
                                                    
                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(36)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(36)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(36)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(36)
                                            0x22
                                                    in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                             end(36)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(36)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(36)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(36)
                                                    0x22
                                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                     end(36)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(36)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(36)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(36)
                                                            0x22
                                                                    onAction(STRING_LITERAL_LONG_QUOTE)
            0x27
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x27
                                                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(26)
                                                    
                                                            0x27
                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(26)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(26)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(26)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(26)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(29)
                                                                                    
                                                                                            0x27
                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                     end(29)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(29)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(29)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(29)
                                                                                                                    
                                                                                                                            0x27
                                                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(29)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(29)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(29)
                    0x27
                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                            0x27
                                    ANY start(32)
                                                    
                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(32)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(32)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(32)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(32)
                                            0x27
                                                    in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                             end(32)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(32)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(32)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(32)
                                                    0x27
                                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                     end(32)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(32)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(32)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(32)
                                                            0x27
                                                                    onAction(STRING_LITERAL_LONG_SINGLE_QUOTE)
            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                            onAction(INTEGER)
                            0x2e
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DECIMAL)
                                                    0x45,0x65
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                                            0x2b,0x2d
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                            0x45,0x65
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DOUBLE)
                                    0x2b,0x2d
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
            0x2b,0x2d
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(INTEGER)
                                    0x2e
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DECIMAL)
                                                            0x45,0x65
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                                                    0x2b,0x2d
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                            onAction(DOUBLE)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                    0x2e
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                            onAction(DECIMAL)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
            0x74
                    0x72
                            0x75
                                    0x65
                                            0x66
                                                    0x61
                                                            0x6c
                                                                    0x73
                                                                            0x65
                                                                                    onAction(BOOLEAN)
            0x3b
                    onAction(PREDICATE_LIST1)
            0x2c
                    onAction(OBJECT_LIST1)
            0x25
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                    ANY start(43)
                                                    
                                                            onAction(PN_LOCAL)
                                            0x2e*
                                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(43)
                                                    0x25
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(43)
                                                    0x5c
                                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                                     end(43)
            0x5c
                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                            ANY start(43)
                                            
                                                    onAction(PN_LOCAL)
                                    0x2e*
                                            0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                     end(43)
                                            0x25
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                     end(43)
                                            0x5c
                                                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                             end(43)
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
private fun parse_predicate_helper_25(c: Int): Int{
 if (c<0x9) {
  return 10
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 10
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 10
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 10
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 10
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 10
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 10
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 10
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 10
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 10
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 10
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 10
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 10
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 10
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 10
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 10
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 10
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 10
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 10
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 10
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 10
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 10
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 10
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 10
 }
}
private fun parse_obj_helper_26(c: Int): Int{
 if (c<0x9) {
  return 15
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 15
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 15
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 15
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 15
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 15
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2d) {
  return 15
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 15
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 15
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 15
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 15
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 15
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 15
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 15
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 15
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 15
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 15
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 15
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 15
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 15
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 15
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 15
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 15
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 15
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 15
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 15
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 15
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 15
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 15
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_27(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_28(c: Int): Int{
 if (c<0x45) {
  return 1
 } else if (c<=0x45) {
  return 0
 } else if (c<0x65) {
  return 1
 } else if (c<=0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_29(c: Int): Int{
 if (c<0x2b) {
  return 2
 } else if (c<=0x2b) {
  return 1
 } else if (c<0x2d) {
  return 2
 } else if (c<=0x2d) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_30(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_31(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_32(c: Int): Int{
 if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 0
 } else if (c<0x55) {
  return 3
 } else if (c<=0x55) {
  return 2
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 0
 } else if (c<0x62) {
  return 3
 } else if (c<=0x62) {
  return 0
 } else if (c<0x66) {
  return 3
 } else if (c<=0x66) {
  return 0
 } else if (c<0x6e) {
  return 3
 } else if (c<=0x6e) {
  return 0
 } else if (c<0x72) {
  return 3
 } else if (c<=0x72) {
  return 0
 } else if (c<0x74) {
  return 3
 } else if (c<=0x74) {
  return 0
 } else if (c<0x75) {
  return 3
 } else if (c<=0x75) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_33(c: Int): Int{
 if (c==0x22) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_34(c: Int): Int{
 if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_35(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_36(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x26) {
  return 0
 } else if (c<0x28) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_37(c: Int): Int{
 if (c==0x27) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_38(c: Int): Int{
 if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_39(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_40(c: Int): Int{
 if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_41(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_42(c: Int): Int{
 if (c==0x75) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_43(c: Int): Int{
 if (c==0x6c) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_helper_44(c: Int): Int{
 if (c<0x9) {
  return 17
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 17
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 17
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 17
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 17
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 17
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 17
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 17
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 17
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 17
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 17
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 17
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 17
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 17
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 17
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 17
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 17
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 17
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 17
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 17
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 17
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 17
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 17
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 17
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 17
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 17
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 17
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 17
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 17
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 17
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 17
 }
}
private fun parse_triple_end_or_object_iri_helper_45(c: Int): Int{
 if (c<0x9) {
  return 19
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 19
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 19
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 19
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 19
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 19
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 19
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 19
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 19
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 19
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 19
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 19
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 19
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 19
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 19
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 19
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 19
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5f) {
  return 19
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 19
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 19
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 19
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 19
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 19
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 19
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 19
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 19
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 19
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 19
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 19
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 19
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 19
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 19
 }
}
private fun parse_triple_end_or_object_iri_helper_46(c: Int): Int{
 if (c<0x25) {
  return 3
 } else if (c<=0x25) {
  return 1
 } else if (c<0x2d) {
  return 3
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 3
 } else if (c<=0x3a) {
  return 0
 } else if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 2
 } else if (c<0x5f) {
  return 3
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 3
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 3
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 3
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 3
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 3
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 3
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 3
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 3
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 3
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 3
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 3
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 3
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_triple_end_or_object_iri_helper_47(c: Int): Int{
 if (c<0x21) {
  return 1
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 1
 } else if (c<=0x2f) {
  return 0
 } else if (c<0x3b) {
  return 1
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 1
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 1
 } else if (c<=0x40) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x7e) {
  return 1
 } else if (c<=0x7e) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_triple_end_or_object_string(
    context: ParserContext,
    crossinline onLANGTAG: () -> Unit,
    crossinline onIRI1: () -> Unit,
    crossinline onPREDICATE_LIST1: () -> Unit,
    crossinline onOBJECT_LIST1: () -> Unit,
    crossinline onDOT: () -> Unit,
    crossinline onSKIP_WS_FORCED: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_triple_end_or_object_string_helper_48(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                val localswitch3 = parse_obj_helper_27(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_28(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                onDECIMAL()
                                return
                            }
                        }
                    }
                    else -> {
                        onDOT()
                        return
                    }
                }
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_triple_end_or_object_string_helper_49(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    2 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        loop5@ while(true) {
                            val localswitch6 = parse_triple_end_or_object_string_helper_50(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_triple_end_or_object_string_helper_51(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            loop10@ while(true) {
                                                when (context.c) {
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a -> {
                                                        context.append()
                                                    }
                                                    else -> {
                                                        break@loop10
                                                    }
                                                }
                                            }
                                            continue@loop5
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        onLANGTAG()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_triple_end_or_object_iri_helper_46(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_20(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop3
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        2 -> {
                            context.append()
                            val localswitch6 = parse_triple_end_or_object_iri_helper_47(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    continue@loop3
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
xxx + ANY null [MyPair(first=46, second=46)]
    
            0x2e
                    onAction(DOT)
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(DECIMAL)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
            0x9,0xa,0xd,0x20
                    0x9,0xa,0xd,0x20*
                            onAction(SKIP_WS_FORCED)
            onAction(SKIP_WS)
            0x42
                    0x41
                            0x53
                                    0x45
                                            onAction(BASE)
            0x50
                    0x52
                            0x45
                                    0x46
                                            0x49
                                                    0x58
                                                            onAction(PREFIX)
            0x40
                    0x62
                            0x61
                                    0x73
                                            0x65
                                                    onAction(BASE2)
                    0x70
                            0x72
                                    0x65
                                            0x66
                                                    0x69
                                                            0x78
                                                                    onAction(PREFIX2)
                    0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a
                            0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a*
                                    ANY start(44)
                                                    
                                                            onAction(LANGTAG)
                                            0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a*
                                                                     end(44)
            0x3c
                    ANY start(1)
                                    
                                            0x3e
                                                    onAction(IRIREF)
                            0x21,in (0x23..0x3b),0x3d,in (0x3f..0x5b),0x5d,0x5f,in (0x61..0x7a),in (0x7e..0x1fffff)
                                     end(1)
                            0x5c
                                    0x75
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(1)
                                    0x55
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(1)
            in (0x30..0x3a),in (0x41..0x5a),in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                    ANY start(2)
                                    
                                            0x3a
                                                    onAction(PNAME_NS)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x3a
                    onAction(PNAME_NS)
            0x5f
                    0x3a
                            in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                    ANY start(3)
                                                    
                                                            onAction(BLANK_NODE_LABEL)
                                            0x2e*
                                                    0x2d,in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(3)
                    ANY start(2)
                                    
                                            onAction(PN_LOCAL)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x61
                    onAction(VERB1)
            0x22
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x22
                                                            onAction(STRING_LITERAL_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(17)
                                                    
                                                            0x22
                                                                    onAction(STRING_LITERAL_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(17)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(17)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(17)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(17)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(20)
                                                                                    
                                                                                            0x22
                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                     end(20)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(20)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(20)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(20)
                                                                                                                    
                                                                                                                            0x22
                                                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(20)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(20)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(20)
                    0x22
                            onAction(STRING_LITERAL_QUOTE)
                            0x22
                                    ANY start(36)
                                                    
                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(36)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(36)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(36)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(36)
                                            0x22
                                                    in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                             end(36)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(36)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(36)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(36)
                                                    0x22
                                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                     end(36)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(36)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(36)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(36)
                                                            0x22
                                                                    onAction(STRING_LITERAL_LONG_QUOTE)
            0x27
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x27
                                                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(26)
                                                    
                                                            0x27
                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(26)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(26)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(26)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(26)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(29)
                                                                                    
                                                                                            0x27
                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                     end(29)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(29)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(29)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(29)
                                                                                                                    
                                                                                                                            0x27
                                                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(29)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(29)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(29)
                    0x27
                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                            0x27
                                    ANY start(32)
                                                    
                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(32)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(32)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(32)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(32)
                                            0x27
                                                    in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                             end(32)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(32)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(32)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(32)
                                                    0x27
                                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                     end(32)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(32)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(32)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(32)
                                                            0x27
                                                                    onAction(STRING_LITERAL_LONG_SINGLE_QUOTE)
            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                            onAction(INTEGER)
                            0x2e
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DECIMAL)
                                                    0x45,0x65
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                                            0x2b,0x2d
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                            0x45,0x65
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DOUBLE)
                                    0x2b,0x2d
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
            0x2b,0x2d
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(INTEGER)
                                    0x2e
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DECIMAL)
                                                            0x45,0x65
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                                                    0x2b,0x2d
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                            onAction(DOUBLE)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                    0x2e
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                            onAction(DECIMAL)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
            0x74
                    0x72
                            0x75
                                    0x65
                                            0x66
                                                    0x61
                                                            0x6c
                                                                    0x73
                                                                            0x65
                                                                                    onAction(BOOLEAN)
            0x3b
                    onAction(PREDICATE_LIST1)
            0x2c
                    onAction(OBJECT_LIST1)
            0x25
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                    ANY start(43)
                                                    
                                                            onAction(PN_LOCAL)
                                            0x2e*
                                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(43)
                                                    0x25
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(43)
                                                    0x5c
                                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                                     end(43)
            0x5c
                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                            ANY start(43)
                                            
                                                    onAction(PN_LOCAL)
                                    0x2e*
                                            0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                     end(43)
                                            0x25
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                     end(43)
                                            0x5c
                                                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                             end(43)
            0x5e
                    0x5e
                            onAction(IRI1)
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
private fun parse_predicate_helper_25(c: Int): Int{
 if (c<0x9) {
  return 10
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 10
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 10
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 10
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 10
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 10
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 10
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 10
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 10
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 10
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 10
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 10
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 10
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 10
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 10
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 10
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 10
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 10
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 10
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 10
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 10
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 10
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 10
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 10
 }
}
private fun parse_obj_helper_26(c: Int): Int{
 if (c<0x9) {
  return 15
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 15
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 15
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 15
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 15
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 15
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2d) {
  return 15
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 15
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 15
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 15
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 15
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 15
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 15
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 15
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 15
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 15
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 15
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 15
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 15
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 15
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 15
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 15
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 15
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 15
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 15
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 15
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 15
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 15
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 15
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_27(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_28(c: Int): Int{
 if (c<0x45) {
  return 1
 } else if (c<=0x45) {
  return 0
 } else if (c<0x65) {
  return 1
 } else if (c<=0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_29(c: Int): Int{
 if (c<0x2b) {
  return 2
 } else if (c<=0x2b) {
  return 1
 } else if (c<0x2d) {
  return 2
 } else if (c<=0x2d) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_30(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_31(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_32(c: Int): Int{
 if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 0
 } else if (c<0x55) {
  return 3
 } else if (c<=0x55) {
  return 2
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 0
 } else if (c<0x62) {
  return 3
 } else if (c<=0x62) {
  return 0
 } else if (c<0x66) {
  return 3
 } else if (c<=0x66) {
  return 0
 } else if (c<0x6e) {
  return 3
 } else if (c<=0x6e) {
  return 0
 } else if (c<0x72) {
  return 3
 } else if (c<=0x72) {
  return 0
 } else if (c<0x74) {
  return 3
 } else if (c<=0x74) {
  return 0
 } else if (c<0x75) {
  return 3
 } else if (c<=0x75) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_33(c: Int): Int{
 if (c==0x22) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_34(c: Int): Int{
 if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_35(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_36(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x26) {
  return 0
 } else if (c<0x28) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_37(c: Int): Int{
 if (c==0x27) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_38(c: Int): Int{
 if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_39(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_40(c: Int): Int{
 if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_41(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_42(c: Int): Int{
 if (c==0x75) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_43(c: Int): Int{
 if (c==0x6c) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_helper_44(c: Int): Int{
 if (c<0x9) {
  return 17
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 17
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 17
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 17
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 17
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 17
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 17
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 17
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 17
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 17
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 17
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 17
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 17
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 17
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 17
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 17
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 17
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 17
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 17
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 17
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 17
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 17
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 17
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 17
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 17
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 17
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 17
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 17
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 17
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 17
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 17
 }
}
private fun parse_triple_end_or_object_iri_helper_45(c: Int): Int{
 if (c<0x9) {
  return 19
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 19
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 19
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 19
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 19
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 19
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 19
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 19
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 19
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 19
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 19
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 19
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 19
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 19
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 19
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 19
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 19
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5f) {
  return 19
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 19
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 19
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 19
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 19
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 19
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 19
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 19
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 19
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 19
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 19
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 19
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 19
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 19
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 19
 }
}
private fun parse_triple_end_or_object_iri_helper_46(c: Int): Int{
 if (c<0x25) {
  return 3
 } else if (c<=0x25) {
  return 1
 } else if (c<0x2d) {
  return 3
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 3
 } else if (c<=0x3a) {
  return 0
 } else if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 2
 } else if (c<0x5f) {
  return 3
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 3
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 3
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 3
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 3
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 3
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 3
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 3
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 3
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 3
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 3
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 3
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 3
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_triple_end_or_object_iri_helper_47(c: Int): Int{
 if (c<0x21) {
  return 1
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 1
 } else if (c<=0x2f) {
  return 0
 } else if (c<0x3b) {
  return 1
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 1
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 1
 } else if (c<=0x40) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x7e) {
  return 1
 } else if (c<=0x7e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_or_object_string_helper_48(c: Int): Int{
 if (c<0x9) {
  return 20
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 20
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 20
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 20
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 20
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 20
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 20
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 20
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 20
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 20
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 20
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 20
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 20
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 20
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 20
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 20
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 20
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5e) {
  return 20
 } else if (c<=0x5e) {
  return 19
 } else if (c<0x5f) {
  return 20
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 20
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 20
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 20
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 20
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 20
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 20
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 20
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 20
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 20
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 20
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 20
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 20
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 20
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 20
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_49(c: Int): Int{
 if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 2
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 3
 } else if (c<=0x70) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_50(c: Int): Int{
 if (c==0x2d) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_51(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_triple_end_or_object_string_typed(
    context: ParserContext,
    crossinline onIRIREF: () -> Unit,
    crossinline onPNAME_NS: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_triple_end_or_object_string_helper_48(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                val localswitch3 = parse_obj_helper_27(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_28(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                onDECIMAL()
                                return
                            }
                        }
                    }
                    else -> {
                        onDOT()
                        return
                    }
                }
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_triple_end_or_object_string_helper_49(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    2 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        loop5@ while(true) {
                            val localswitch6 = parse_triple_end_or_object_string_helper_50(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_triple_end_or_object_string_helper_51(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            loop10@ while(true) {
                                                when (context.c) {
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a -> {
                                                        context.append()
                                                    }
                                                    else -> {
                                                        break@loop10
                                                    }
                                                }
                                            }
                                            continue@loop5
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        onLANGTAG()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_triple_end_or_object_iri_helper_46(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_20(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop3
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        2 -> {
                            context.append()
                            val localswitch6 = parse_triple_end_or_object_iri_helper_47(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    continue@loop3
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
xxx + ANY null [MyPair(first=46, second=46)]
    
            0x2e
                    onAction(DOT)
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(DECIMAL)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
            0x9,0xa,0xd,0x20
                    0x9,0xa,0xd,0x20*
                            onAction(SKIP_WS_FORCED)
            onAction(SKIP_WS)
            0x42
                    0x41
                            0x53
                                    0x45
                                            onAction(BASE)
            0x50
                    0x52
                            0x45
                                    0x46
                                            0x49
                                                    0x58
                                                            onAction(PREFIX)
            0x40
                    0x62
                            0x61
                                    0x73
                                            0x65
                                                    onAction(BASE2)
                    0x70
                            0x72
                                    0x65
                                            0x66
                                                    0x69
                                                            0x78
                                                                    onAction(PREFIX2)
                    0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a
                            0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a*
                                    ANY start(44)
                                                    
                                                            onAction(LANGTAG)
                                            0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a*
                                                                     end(44)
            0x3c
                    ANY start(1)
                                    
                                            0x3e
                                                    onAction(IRIREF)
                            0x21,in (0x23..0x3b),0x3d,in (0x3f..0x5b),0x5d,0x5f,in (0x61..0x7a),in (0x7e..0x1fffff)
                                     end(1)
                            0x5c
                                    0x75
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(1)
                                    0x55
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(1)
            in (0x30..0x3a),in (0x41..0x5a),in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                    ANY start(2)
                                    
                                            0x3a
                                                    onAction(PNAME_NS)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x3a
                    onAction(PNAME_NS)
            0x5f
                    0x3a
                            in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                    ANY start(3)
                                                    
                                                            onAction(BLANK_NODE_LABEL)
                                            0x2e*
                                                    0x2d,in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(3)
                    ANY start(2)
                                    
                                            onAction(PN_LOCAL)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x61
                    onAction(VERB1)
            0x22
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x22
                                                            onAction(STRING_LITERAL_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(17)
                                                    
                                                            0x22
                                                                    onAction(STRING_LITERAL_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(17)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(17)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(17)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(17)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(20)
                                                                                    
                                                                                            0x22
                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                     end(20)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(20)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(20)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(20)
                                                                                                                    
                                                                                                                            0x22
                                                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(20)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(20)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(20)
                    0x22
                            onAction(STRING_LITERAL_QUOTE)
                            0x22
                                    ANY start(36)
                                                    
                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(36)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(36)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(36)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(36)
                                            0x22
                                                    in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                             end(36)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(36)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(36)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(36)
                                                    0x22
                                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                     end(36)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(36)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(36)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(36)
                                                            0x22
                                                                    onAction(STRING_LITERAL_LONG_QUOTE)
            0x27
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x27
                                                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(26)
                                                    
                                                            0x27
                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(26)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(26)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(26)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(26)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(29)
                                                                                    
                                                                                            0x27
                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                     end(29)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(29)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(29)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(29)
                                                                                                                    
                                                                                                                            0x27
                                                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(29)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(29)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(29)
                    0x27
                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                            0x27
                                    ANY start(32)
                                                    
                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(32)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(32)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(32)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(32)
                                            0x27
                                                    in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                             end(32)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(32)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(32)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(32)
                                                    0x27
                                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                     end(32)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(32)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(32)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(32)
                                                            0x27
                                                                    onAction(STRING_LITERAL_LONG_SINGLE_QUOTE)
            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                            onAction(INTEGER)
                            0x2e
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DECIMAL)
                                                    0x45,0x65
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                                            0x2b,0x2d
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                            0x45,0x65
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DOUBLE)
                                    0x2b,0x2d
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
            0x2b,0x2d
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(INTEGER)
                                    0x2e
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DECIMAL)
                                                            0x45,0x65
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                                                    0x2b,0x2d
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                            onAction(DOUBLE)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                    0x2e
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                            onAction(DECIMAL)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
            0x74
                    0x72
                            0x75
                                    0x65
                                            0x66
                                                    0x61
                                                            0x6c
                                                                    0x73
                                                                            0x65
                                                                                    onAction(BOOLEAN)
            0x3b
                    onAction(PREDICATE_LIST1)
            0x2c
                    onAction(OBJECT_LIST1)
            0x25
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                    ANY start(43)
                                                    
                                                            onAction(PN_LOCAL)
                                            0x2e*
                                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(43)
                                                    0x25
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(43)
                                                    0x5c
                                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                                     end(43)
            0x5c
                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                            ANY start(43)
                                            
                                                    onAction(PN_LOCAL)
                                    0x2e*
                                            0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                     end(43)
                                            0x25
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                     end(43)
                                            0x5c
                                                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                             end(43)
            0x5e
                    0x5e
                            onAction(IRI1)
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
private fun parse_predicate_helper_25(c: Int): Int{
 if (c<0x9) {
  return 10
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 10
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 10
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 10
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 10
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 10
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 10
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 10
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 10
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 10
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 10
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 10
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 10
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 10
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 10
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 10
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 10
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 10
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 10
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 10
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 10
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 10
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 10
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 10
 }
}
private fun parse_obj_helper_26(c: Int): Int{
 if (c<0x9) {
  return 15
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 15
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 15
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 15
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 15
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 15
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2d) {
  return 15
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 15
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 15
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 15
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 15
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 15
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 15
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 15
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 15
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 15
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 15
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 15
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 15
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 15
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 15
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 15
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 15
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 15
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 15
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 15
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 15
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 15
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 15
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_27(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_28(c: Int): Int{
 if (c<0x45) {
  return 1
 } else if (c<=0x45) {
  return 0
 } else if (c<0x65) {
  return 1
 } else if (c<=0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_29(c: Int): Int{
 if (c<0x2b) {
  return 2
 } else if (c<=0x2b) {
  return 1
 } else if (c<0x2d) {
  return 2
 } else if (c<=0x2d) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_30(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_31(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_32(c: Int): Int{
 if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 0
 } else if (c<0x55) {
  return 3
 } else if (c<=0x55) {
  return 2
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 0
 } else if (c<0x62) {
  return 3
 } else if (c<=0x62) {
  return 0
 } else if (c<0x66) {
  return 3
 } else if (c<=0x66) {
  return 0
 } else if (c<0x6e) {
  return 3
 } else if (c<=0x6e) {
  return 0
 } else if (c<0x72) {
  return 3
 } else if (c<=0x72) {
  return 0
 } else if (c<0x74) {
  return 3
 } else if (c<=0x74) {
  return 0
 } else if (c<0x75) {
  return 3
 } else if (c<=0x75) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_33(c: Int): Int{
 if (c==0x22) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_34(c: Int): Int{
 if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_35(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_36(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x26) {
  return 0
 } else if (c<0x28) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_37(c: Int): Int{
 if (c==0x27) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_38(c: Int): Int{
 if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_39(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_40(c: Int): Int{
 if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_41(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_42(c: Int): Int{
 if (c==0x75) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_43(c: Int): Int{
 if (c==0x6c) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_helper_44(c: Int): Int{
 if (c<0x9) {
  return 17
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 17
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 17
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 17
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 17
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 17
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 17
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 17
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 17
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 17
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 17
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 17
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 17
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 17
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 17
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 17
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 17
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 17
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 17
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 17
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 17
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 17
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 17
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 17
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 17
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 17
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 17
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 17
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 17
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 17
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 17
 }
}
private fun parse_triple_end_or_object_iri_helper_45(c: Int): Int{
 if (c<0x9) {
  return 19
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 19
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 19
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 19
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 19
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 19
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 19
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 19
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 19
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 19
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 19
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 19
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 19
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 19
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 19
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 19
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 19
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5f) {
  return 19
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 19
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 19
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 19
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 19
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 19
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 19
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 19
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 19
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 19
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 19
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 19
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 19
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 19
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 19
 }
}
private fun parse_triple_end_or_object_iri_helper_46(c: Int): Int{
 if (c<0x25) {
  return 3
 } else if (c<=0x25) {
  return 1
 } else if (c<0x2d) {
  return 3
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 3
 } else if (c<=0x3a) {
  return 0
 } else if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 2
 } else if (c<0x5f) {
  return 3
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 3
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 3
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 3
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 3
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 3
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 3
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 3
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 3
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 3
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 3
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 3
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 3
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_triple_end_or_object_iri_helper_47(c: Int): Int{
 if (c<0x21) {
  return 1
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 1
 } else if (c<=0x2f) {
  return 0
 } else if (c<0x3b) {
  return 1
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 1
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 1
 } else if (c<=0x40) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x7e) {
  return 1
 } else if (c<=0x7e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_or_object_string_helper_48(c: Int): Int{
 if (c<0x9) {
  return 20
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 20
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 20
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 20
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 20
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 20
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 20
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 20
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 20
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 20
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 20
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 20
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 20
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 20
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 20
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 20
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 20
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5e) {
  return 20
 } else if (c<=0x5e) {
  return 19
 } else if (c<0x5f) {
  return 20
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 20
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 20
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 20
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 20
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 20
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 20
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 20
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 20
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 20
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 20
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 20
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 20
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 20
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 20
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_49(c: Int): Int{
 if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 2
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 3
 } else if (c<=0x70) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_50(c: Int): Int{
 if (c==0x2d) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_51(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_triple_end_or_object_string_typed_iri(
    context: ParserContext,
    crossinline onPN_LOCAL: () -> Unit,
    crossinline onPREDICATE_LIST1: () -> Unit,
    crossinline onOBJECT_LIST1: () -> Unit,
    crossinline onDOT: () -> Unit,
    crossinline onSKIP_WS_FORCED: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_triple_end_or_object_string_helper_48(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                val localswitch3 = parse_obj_helper_27(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_28(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                onDECIMAL()
                                return
                            }
                        }
                    }
                    else -> {
                        onDOT()
                        return
                    }
                }
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_triple_end_or_object_string_helper_49(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    2 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        loop5@ while(true) {
                            val localswitch6 = parse_triple_end_or_object_string_helper_50(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_triple_end_or_object_string_helper_51(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            loop10@ while(true) {
                                                when (context.c) {
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a -> {
                                                        context.append()
                                                    }
                                                    else -> {
                                                        break@loop10
                                                    }
                                                }
                                            }
                                            continue@loop5
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        onLANGTAG()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_triple_end_or_object_iri_helper_46(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_20(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop3
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        2 -> {
                            context.append()
                            val localswitch6 = parse_triple_end_or_object_iri_helper_47(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    continue@loop3
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
xxx + ANY null [MyPair(first=46, second=46)]
    
            0x2e
                    onAction(DOT)
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(DECIMAL)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
            0x9,0xa,0xd,0x20
                    0x9,0xa,0xd,0x20*
                            onAction(SKIP_WS_FORCED)
            onAction(SKIP_WS)
            0x42
                    0x41
                            0x53
                                    0x45
                                            onAction(BASE)
            0x50
                    0x52
                            0x45
                                    0x46
                                            0x49
                                                    0x58
                                                            onAction(PREFIX)
            0x40
                    0x62
                            0x61
                                    0x73
                                            0x65
                                                    onAction(BASE2)
                    0x70
                            0x72
                                    0x65
                                            0x66
                                                    0x69
                                                            0x78
                                                                    onAction(PREFIX2)
                    0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a
                            0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a*
                                    ANY start(44)
                                                    
                                                            onAction(LANGTAG)
                                            0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a*
                                                                     end(44)
            0x3c
                    ANY start(1)
                                    
                                            0x3e
                                                    onAction(IRIREF)
                            0x21,in (0x23..0x3b),0x3d,in (0x3f..0x5b),0x5d,0x5f,in (0x61..0x7a),in (0x7e..0x1fffff)
                                     end(1)
                            0x5c
                                    0x75
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(1)
                                    0x55
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(1)
            in (0x30..0x3a),in (0x41..0x5a),in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                    ANY start(2)
                                    
                                            0x3a
                                                    onAction(PNAME_NS)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x3a
                    onAction(PNAME_NS)
            0x5f
                    0x3a
                            in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                    ANY start(3)
                                                    
                                                            onAction(BLANK_NODE_LABEL)
                                            0x2e*
                                                    0x2d,in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(3)
                    ANY start(2)
                                    
                                            onAction(PN_LOCAL)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x61
                    onAction(VERB1)
            0x22
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x22
                                                            onAction(STRING_LITERAL_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(17)
                                                    
                                                            0x22
                                                                    onAction(STRING_LITERAL_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(17)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(17)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(17)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(17)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(20)
                                                                                    
                                                                                            0x22
                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                     end(20)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(20)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(20)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(20)
                                                                                                                    
                                                                                                                            0x22
                                                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(20)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(20)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(20)
                    0x22
                            onAction(STRING_LITERAL_QUOTE)
                            0x22
                                    ANY start(36)
                                                    
                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(36)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(36)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(36)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(36)
                                            0x22
                                                    in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                             end(36)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(36)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(36)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(36)
                                                    0x22
                                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                     end(36)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(36)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(36)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(36)
                                                            0x22
                                                                    onAction(STRING_LITERAL_LONG_QUOTE)
            0x27
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x27
                                                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(26)
                                                    
                                                            0x27
                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(26)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(26)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(26)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(26)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(29)
                                                                                    
                                                                                            0x27
                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                     end(29)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(29)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(29)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(29)
                                                                                                                    
                                                                                                                            0x27
                                                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(29)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(29)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(29)
                    0x27
                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                            0x27
                                    ANY start(32)
                                                    
                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(32)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(32)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(32)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(32)
                                            0x27
                                                    in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                             end(32)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(32)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(32)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(32)
                                                    0x27
                                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                     end(32)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(32)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(32)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(32)
                                                            0x27
                                                                    onAction(STRING_LITERAL_LONG_SINGLE_QUOTE)
            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                            onAction(INTEGER)
                            0x2e
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DECIMAL)
                                                    0x45,0x65
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                                            0x2b,0x2d
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                            0x45,0x65
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DOUBLE)
                                    0x2b,0x2d
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
            0x2b,0x2d
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(INTEGER)
                                    0x2e
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DECIMAL)
                                                            0x45,0x65
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                                                    0x2b,0x2d
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                            onAction(DOUBLE)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                    0x2e
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                            onAction(DECIMAL)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
            0x74
                    0x72
                            0x75
                                    0x65
                                            0x66
                                                    0x61
                                                            0x6c
                                                                    0x73
                                                                            0x65
                                                                                    onAction(BOOLEAN)
            0x3b
                    onAction(PREDICATE_LIST1)
            0x2c
                    onAction(OBJECT_LIST1)
            0x25
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                    ANY start(43)
                                                    
                                                            onAction(PN_LOCAL)
                                            0x2e*
                                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(43)
                                                    0x25
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(43)
                                                    0x5c
                                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                                     end(43)
            0x5c
                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                            ANY start(43)
                                            
                                                    onAction(PN_LOCAL)
                                    0x2e*
                                            0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                     end(43)
                                            0x25
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                     end(43)
                                            0x5c
                                                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                             end(43)
            0x5e
                    0x5e
                            onAction(IRI1)
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
private fun parse_predicate_helper_25(c: Int): Int{
 if (c<0x9) {
  return 10
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 10
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 10
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 10
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 10
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 10
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 10
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 10
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 10
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 10
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 10
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 10
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 10
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 10
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 10
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 10
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 10
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 10
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 10
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 10
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 10
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 10
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 10
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 10
 }
}
private fun parse_obj_helper_26(c: Int): Int{
 if (c<0x9) {
  return 15
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 15
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 15
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 15
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 15
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 15
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2d) {
  return 15
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 15
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 15
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 15
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 15
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 15
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 15
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 15
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 15
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 15
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 15
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 15
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 15
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 15
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 15
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 15
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 15
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 15
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 15
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 15
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 15
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 15
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 15
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_27(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_28(c: Int): Int{
 if (c<0x45) {
  return 1
 } else if (c<=0x45) {
  return 0
 } else if (c<0x65) {
  return 1
 } else if (c<=0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_29(c: Int): Int{
 if (c<0x2b) {
  return 2
 } else if (c<=0x2b) {
  return 1
 } else if (c<0x2d) {
  return 2
 } else if (c<=0x2d) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_30(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_31(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_32(c: Int): Int{
 if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 0
 } else if (c<0x55) {
  return 3
 } else if (c<=0x55) {
  return 2
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 0
 } else if (c<0x62) {
  return 3
 } else if (c<=0x62) {
  return 0
 } else if (c<0x66) {
  return 3
 } else if (c<=0x66) {
  return 0
 } else if (c<0x6e) {
  return 3
 } else if (c<=0x6e) {
  return 0
 } else if (c<0x72) {
  return 3
 } else if (c<=0x72) {
  return 0
 } else if (c<0x74) {
  return 3
 } else if (c<=0x74) {
  return 0
 } else if (c<0x75) {
  return 3
 } else if (c<=0x75) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_33(c: Int): Int{
 if (c==0x22) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_34(c: Int): Int{
 if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_35(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_36(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x26) {
  return 0
 } else if (c<0x28) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_37(c: Int): Int{
 if (c==0x27) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_38(c: Int): Int{
 if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_39(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_40(c: Int): Int{
 if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_41(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_42(c: Int): Int{
 if (c==0x75) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_43(c: Int): Int{
 if (c==0x6c) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_helper_44(c: Int): Int{
 if (c<0x9) {
  return 17
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 17
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 17
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 17
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 17
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 17
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 17
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 17
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 17
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 17
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 17
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 17
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 17
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 17
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 17
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 17
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 17
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 17
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 17
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 17
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 17
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 17
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 17
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 17
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 17
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 17
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 17
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 17
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 17
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 17
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 17
 }
}
private fun parse_triple_end_or_object_iri_helper_45(c: Int): Int{
 if (c<0x9) {
  return 19
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 19
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 19
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 19
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 19
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 19
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 19
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 19
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 19
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 19
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 19
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 19
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 19
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 19
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 19
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 19
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 19
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5f) {
  return 19
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 19
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 19
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 19
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 19
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 19
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 19
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 19
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 19
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 19
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 19
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 19
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 19
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 19
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 19
 }
}
private fun parse_triple_end_or_object_iri_helper_46(c: Int): Int{
 if (c<0x25) {
  return 3
 } else if (c<=0x25) {
  return 1
 } else if (c<0x2d) {
  return 3
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 3
 } else if (c<=0x3a) {
  return 0
 } else if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 2
 } else if (c<0x5f) {
  return 3
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 3
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 3
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 3
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 3
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 3
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 3
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 3
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 3
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 3
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 3
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 3
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 3
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_triple_end_or_object_iri_helper_47(c: Int): Int{
 if (c<0x21) {
  return 1
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 1
 } else if (c<=0x2f) {
  return 0
 } else if (c<0x3b) {
  return 1
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 1
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 1
 } else if (c<=0x40) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x7e) {
  return 1
 } else if (c<=0x7e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_or_object_string_helper_48(c: Int): Int{
 if (c<0x9) {
  return 20
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 20
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 20
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 20
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 20
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 20
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 20
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 20
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 20
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 20
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 20
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 20
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 20
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 20
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 20
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 20
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 20
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5e) {
  return 20
 } else if (c<=0x5e) {
  return 19
 } else if (c<0x5f) {
  return 20
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 20
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 20
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 20
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 20
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 20
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 20
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 20
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 20
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 20
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 20
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 20
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 20
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 20
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 20
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_49(c: Int): Int{
 if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 2
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 3
 } else if (c<=0x70) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_50(c: Int): Int{
 if (c==0x2d) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_51(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_subject_iri_or_ws(
    context: ParserContext,
    crossinline onPN_LOCAL: () -> Unit,
    crossinline onSKIP_WS_FORCED: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_triple_end_or_object_string_helper_48(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                val localswitch3 = parse_obj_helper_27(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_28(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                onDECIMAL()
                                return
                            }
                        }
                    }
                    else -> {
                        onDOT()
                        return
                    }
                }
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_triple_end_or_object_string_helper_49(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    2 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        loop5@ while(true) {
                            val localswitch6 = parse_triple_end_or_object_string_helper_50(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_triple_end_or_object_string_helper_51(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            loop10@ while(true) {
                                                when (context.c) {
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a -> {
                                                        context.append()
                                                    }
                                                    else -> {
                                                        break@loop10
                                                    }
                                                }
                                            }
                                            continue@loop5
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        onLANGTAG()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_triple_end_or_object_iri_helper_46(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_20(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop3
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        2 -> {
                            context.append()
                            val localswitch6 = parse_triple_end_or_object_iri_helper_47(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    continue@loop3
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
xxx + ANY null [MyPair(first=46, second=46)]
    
            0x2e
                    onAction(DOT)
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(DECIMAL)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
            0x9,0xa,0xd,0x20
                    0x9,0xa,0xd,0x20*
                            onAction(SKIP_WS_FORCED)
            onAction(SKIP_WS)
            0x42
                    0x41
                            0x53
                                    0x45
                                            onAction(BASE)
            0x50
                    0x52
                            0x45
                                    0x46
                                            0x49
                                                    0x58
                                                            onAction(PREFIX)
            0x40
                    0x62
                            0x61
                                    0x73
                                            0x65
                                                    onAction(BASE2)
                    0x70
                            0x72
                                    0x65
                                            0x66
                                                    0x69
                                                            0x78
                                                                    onAction(PREFIX2)
                    0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a
                            0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a*
                                    ANY start(44)
                                                    
                                                            onAction(LANGTAG)
                                            0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a*
                                                                     end(44)
            0x3c
                    ANY start(1)
                                    
                                            0x3e
                                                    onAction(IRIREF)
                            0x21,in (0x23..0x3b),0x3d,in (0x3f..0x5b),0x5d,0x5f,in (0x61..0x7a),in (0x7e..0x1fffff)
                                     end(1)
                            0x5c
                                    0x75
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(1)
                                    0x55
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(1)
            in (0x30..0x3a),in (0x41..0x5a),in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                    ANY start(2)
                                    
                                            0x3a
                                                    onAction(PNAME_NS)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x3a
                    onAction(PNAME_NS)
            0x5f
                    0x3a
                            in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                    ANY start(3)
                                                    
                                                            onAction(BLANK_NODE_LABEL)
                                            0x2e*
                                                    0x2d,in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(3)
                    ANY start(2)
                                    
                                            onAction(PN_LOCAL)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x61
                    onAction(VERB1)
            0x22
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x22
                                                            onAction(STRING_LITERAL_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(17)
                                                    
                                                            0x22
                                                                    onAction(STRING_LITERAL_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(17)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(17)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(17)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(17)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(20)
                                                                                    
                                                                                            0x22
                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                     end(20)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(20)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(20)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(20)
                                                                                                                    
                                                                                                                            0x22
                                                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(20)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(20)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(20)
                    0x22
                            onAction(STRING_LITERAL_QUOTE)
                            0x22
                                    ANY start(36)
                                                    
                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(36)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(36)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(36)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(36)
                                            0x22
                                                    in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                             end(36)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(36)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(36)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(36)
                                                    0x22
                                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                     end(36)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(36)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(36)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(36)
                                                            0x22
                                                                    onAction(STRING_LITERAL_LONG_QUOTE)
            0x27
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x27
                                                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(26)
                                                    
                                                            0x27
                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(26)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(26)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(26)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(26)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(29)
                                                                                    
                                                                                            0x27
                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                     end(29)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(29)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(29)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(29)
                                                                                                                    
                                                                                                                            0x27
                                                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(29)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(29)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(29)
                    0x27
                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                            0x27
                                    ANY start(32)
                                                    
                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(32)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(32)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(32)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(32)
                                            0x27
                                                    in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                             end(32)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(32)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(32)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(32)
                                                    0x27
                                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                     end(32)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(32)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(32)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(32)
                                                            0x27
                                                                    onAction(STRING_LITERAL_LONG_SINGLE_QUOTE)
            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                            onAction(INTEGER)
                            0x2e
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DECIMAL)
                                                    0x45,0x65
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                                            0x2b,0x2d
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                            0x45,0x65
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DOUBLE)
                                    0x2b,0x2d
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
            0x2b,0x2d
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(INTEGER)
                                    0x2e
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DECIMAL)
                                                            0x45,0x65
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                                                    0x2b,0x2d
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                            onAction(DOUBLE)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                    0x2e
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                            onAction(DECIMAL)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
            0x74
                    0x72
                            0x75
                                    0x65
                                            0x66
                                                    0x61
                                                            0x6c
                                                                    0x73
                                                                            0x65
                                                                                    onAction(BOOLEAN)
            0x3b
                    onAction(PREDICATE_LIST1)
            0x2c
                    onAction(OBJECT_LIST1)
            0x25
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                    ANY start(43)
                                                    
                                                            onAction(PN_LOCAL)
                                            0x2e*
                                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(43)
                                                    0x25
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(43)
                                                    0x5c
                                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                                     end(43)
            0x5c
                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                            ANY start(43)
                                            
                                                    onAction(PN_LOCAL)
                                    0x2e*
                                            0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                     end(43)
                                            0x25
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                     end(43)
                                            0x5c
                                                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                             end(43)
            0x5e
                    0x5e
                            onAction(IRI1)
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
private fun parse_predicate_helper_25(c: Int): Int{
 if (c<0x9) {
  return 10
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 10
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 10
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 10
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 10
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 10
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 10
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 10
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 10
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 10
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 10
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 10
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 10
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 10
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 10
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 10
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 10
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 10
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 10
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 10
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 10
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 10
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 10
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 10
 }
}
private fun parse_obj_helper_26(c: Int): Int{
 if (c<0x9) {
  return 15
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 15
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 15
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 15
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 15
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 15
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2d) {
  return 15
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 15
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 15
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 15
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 15
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 15
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 15
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 15
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 15
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 15
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 15
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 15
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 15
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 15
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 15
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 15
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 15
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 15
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 15
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 15
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 15
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 15
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 15
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_27(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_28(c: Int): Int{
 if (c<0x45) {
  return 1
 } else if (c<=0x45) {
  return 0
 } else if (c<0x65) {
  return 1
 } else if (c<=0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_29(c: Int): Int{
 if (c<0x2b) {
  return 2
 } else if (c<=0x2b) {
  return 1
 } else if (c<0x2d) {
  return 2
 } else if (c<=0x2d) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_30(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_31(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_32(c: Int): Int{
 if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 0
 } else if (c<0x55) {
  return 3
 } else if (c<=0x55) {
  return 2
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 0
 } else if (c<0x62) {
  return 3
 } else if (c<=0x62) {
  return 0
 } else if (c<0x66) {
  return 3
 } else if (c<=0x66) {
  return 0
 } else if (c<0x6e) {
  return 3
 } else if (c<=0x6e) {
  return 0
 } else if (c<0x72) {
  return 3
 } else if (c<=0x72) {
  return 0
 } else if (c<0x74) {
  return 3
 } else if (c<=0x74) {
  return 0
 } else if (c<0x75) {
  return 3
 } else if (c<=0x75) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_33(c: Int): Int{
 if (c==0x22) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_34(c: Int): Int{
 if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_35(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_36(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x26) {
  return 0
 } else if (c<0x28) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_37(c: Int): Int{
 if (c==0x27) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_38(c: Int): Int{
 if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_39(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_40(c: Int): Int{
 if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_41(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_42(c: Int): Int{
 if (c==0x75) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_43(c: Int): Int{
 if (c==0x6c) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_helper_44(c: Int): Int{
 if (c<0x9) {
  return 17
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 17
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 17
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 17
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 17
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 17
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 17
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 17
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 17
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 17
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 17
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 17
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 17
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 17
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 17
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 17
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 17
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 17
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 17
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 17
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 17
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 17
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 17
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 17
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 17
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 17
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 17
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 17
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 17
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 17
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 17
 }
}
private fun parse_triple_end_or_object_iri_helper_45(c: Int): Int{
 if (c<0x9) {
  return 19
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 19
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 19
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 19
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 19
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 19
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 19
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 19
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 19
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 19
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 19
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 19
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 19
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 19
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 19
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 19
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 19
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5f) {
  return 19
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 19
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 19
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 19
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 19
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 19
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 19
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 19
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 19
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 19
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 19
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 19
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 19
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 19
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 19
 }
}
private fun parse_triple_end_or_object_iri_helper_46(c: Int): Int{
 if (c<0x25) {
  return 3
 } else if (c<=0x25) {
  return 1
 } else if (c<0x2d) {
  return 3
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 3
 } else if (c<=0x3a) {
  return 0
 } else if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 2
 } else if (c<0x5f) {
  return 3
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 3
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 3
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 3
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 3
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 3
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 3
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 3
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 3
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 3
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 3
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 3
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 3
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_triple_end_or_object_iri_helper_47(c: Int): Int{
 if (c<0x21) {
  return 1
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 1
 } else if (c<=0x2f) {
  return 0
 } else if (c<0x3b) {
  return 1
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 1
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 1
 } else if (c<=0x40) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x7e) {
  return 1
 } else if (c<=0x7e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_or_object_string_helper_48(c: Int): Int{
 if (c<0x9) {
  return 20
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 20
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 20
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 20
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 20
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 20
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 20
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 20
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 20
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 20
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 20
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 20
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 20
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 20
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 20
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 20
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 20
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5e) {
  return 20
 } else if (c<=0x5e) {
  return 19
 } else if (c<0x5f) {
  return 20
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 20
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 20
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 20
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 20
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 20
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 20
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 20
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 20
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 20
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 20
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 20
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 20
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 20
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 20
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_49(c: Int): Int{
 if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 2
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 3
 } else if (c<=0x70) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_50(c: Int): Int{
 if (c==0x2d) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_51(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else {
  return 1
 }
}
internal inline fun parse_predicate_iri_or_ws(
    context: ParserContext,
    crossinline onPN_LOCAL: () -> Unit,
    crossinline onSKIP_WS_FORCED: () -> Unit
) {
    context.clear()
    error@ while(true) {
        val localswitch1 = parse_triple_end_or_object_string_helper_48(context.c)
        when (localswitch1) {
            0 -> {
                context.append()
                val localswitch3 = parse_obj_helper_27(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        val localswitch5 = parse_obj_helper_28(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_obj_helper_29(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        loop9@ while(true) {
                                            when (context.c) {
                                                0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                    context.append()
                                                }
                                                else -> {
                                                    break@loop9
                                                }
                                            }
                                        }
                                        onDOUBLE()
                                        return
                                    }
                                    1 -> {
                                        context.append()
                                        val localswitch9 = parse_obj_helper_27(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                loop11@ while(true) {
                                                    when (context.c) {
                                                        0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39 -> {
                                                            context.append()
                                                        }
                                                        else -> {
                                                            break@loop11
                                                        }
                                                    }
                                                }
                                                onDOUBLE()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                onDECIMAL()
                                return
                            }
                        }
                    }
                    else -> {
                        onDOT()
                        return
                    }
                }
            }
            1 -> {
                context.append()
                loop3@ while(true) {
                    when (context.c) {
                        0x9,0xa,0xd,0x20 -> {
                            context.append()
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                onSKIP_WS_FORCED()
                return
            }
            2 -> {
                context.append()
                val localswitch3 = parse_statement_helper_3(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_4(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_5(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        onBASE()
                                        return
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            3 -> {
                context.append()
                val localswitch3 = parse_statement_helper_6(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_5(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_7(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_8(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_9(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        onPREFIX()
                                                        return
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    else -> {
                        break@error
                    }
                }
            }
            4 -> {
                context.append()
                val localswitch3 = parse_triple_end_or_object_string_helper_49(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_11(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_12(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_13(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                onBASE2()
                                                return
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    1 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_14(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                val localswitch7 = parse_statement_helper_13(context.c)
                                when (localswitch7) {
                                    0 -> {
                                        context.append()
                                        val localswitch9 = parse_statement_helper_15(context.c)
                                        when (localswitch9) {
                                            0 -> {
                                                context.append()
                                                val localswitch11 = parse_statement_helper_16(context.c)
                                                when (localswitch11) {
                                                    0 -> {
                                                        context.append()
                                                        val localswitch13 = parse_statement_helper_17(context.c)
                                                        when (localswitch13) {
                                                            0 -> {
                                                                context.append()
                                                                onPREFIX2()
                                                                return
                                                            }
                                                            else -> {
                                                                break@error
                                                            }
                                                        }
                                                    }
                                                    else -> {
                                                        break@error
                                                    }
                                                }
                                            }
                                            else -> {
                                                break@error
                                            }
                                        }
                                    }
                                    else -> {
                                        break@error
                                    }
                                }
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
                    2 -> {
                        context.append()
                        loop5@ while(true) {
                            when (context.c) {
                                0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a -> {
                                    context.append()
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        loop5@ while(true) {
                            val localswitch6 = parse_triple_end_or_object_string_helper_50(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_triple_end_or_object_string_helper_51(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            loop10@ while(true) {
                                                when (context.c) {
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a -> {
                                                        context.append()
                                                    }
                                                    else -> {
                                                        break@loop10
                                                    }
                                                }
                                            }
                                            continue@loop5
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@loop5
                                }
                            }
                        }
                        onLANGTAG()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            5 -> {
                context.append()
                loop3@ while(true) {
                    val localswitch4 = parse_statement_helper_18(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_19(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    continue@loop3
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                1 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            val localswitch10 = parse_statement_helper_20(context.c)
                                            when (localswitch10) {
                                                0 -> {
                                                    context.append()
                                                    val localswitch12 = parse_statement_helper_20(context.c)
                                                    when (localswitch12) {
                                                        0 -> {
                                                            context.append()
                                                            val localswitch14 = parse_statement_helper_20(context.c)
                                                            when (localswitch14) {
                                                                0 -> {
                                                                    context.append()
                                                                    val localswitch16 = parse_statement_helper_20(context.c)
                                                                    when (localswitch16) {
                                                                        0 -> {
                                                                            context.append()
                                                                            val localswitch18 = parse_statement_helper_20(context.c)
                                                                            when (localswitch18) {
                                                                                0 -> {
                                                                                    context.append()
                                                                                    val localswitch20 = parse_statement_helper_20(context.c)
                                                                                    when (localswitch20) {
                                                                                        0 -> {
                                                                                            context.append()
                                                                                            val localswitch22 = parse_statement_helper_20(context.c)
                                                                                            when (localswitch22) {
                                                                                                0 -> {
                                                                                                    context.append()
                                                                                                    continue@loop3
                                                                                                }
                                                                                                else -> {
                                                                                                    break@error
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else -> {
                                                                                            break@error
                                                                                        }
                                                                                    }
                                                                                }
                                                                                else -> {
                                                                                    break@error
                                                                                }
                                                                            }
                                                                        }
                                                                        else -> {
                                                                            break@error
                                                                        }
                                                                    }
                                                                }
                                                                else -> {
                                                                    break@error
                                                                }
                                                            }
                                                        }
                                                        else -> {
                                                            break@error
                                                        }
                                                    }
                                                }
                                                else -> {
                                                    break@error
                                                }
                                            }
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_21(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onIRIREF()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            6 -> {
                context.append()
                loop3@ while(true) {
                    loop4@ while(true) {
                        when (context.c) {
                            0x2e -> {
                                context.append()
                            }
                            else -> {
                                break@loop4
                            }
                        }
                    }
                    val localswitch4 = parse_triple_end_or_object_iri_helper_46(context.c)
                    when (localswitch4) {
                        0 -> {
                            context.append()
                            continue@loop3
                        }
                        1 -> {
                            context.append()
                            val localswitch6 = parse_statement_helper_20(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    val localswitch8 = parse_statement_helper_20(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop3
                                        }
                                        else -> {
                                            break@error
                                        }
                                    }
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        2 -> {
                            context.append()
                            val localswitch6 = parse_triple_end_or_object_iri_helper_47(context.c)
                            when (localswitch6) {
                                0 -> {
                                    context.append()
                                    continue@loop3
                                }
                                else -> {
                                    break@error
                                }
                            }
                        }
                        else -> {
                            break@loop3
                        }
                    }
                }
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        onPNAME_NS()
                        return
                    }
                    else -> {
                        break@error
                    }
                }
            }
            7 -> {
                context.append()
                onPNAME_NS()
                return
            }
            8 -> {
                context.append()
                val localswitch3 = parse_statement_helper_23(context.c)
                when (localswitch3) {
                    0 -> {
                        context.append()
                        val localswitch5 = parse_statement_helper_24(context.c)
                        when (localswitch5) {
                            0 -> {
                                context.append()
                                loop7@ while(true) {
                                    loop8@ while(true) {
                                        when (context.c) {
                                            0x2e -> {
                                                context.append()
                                            }
                                            else -> {
                                                break@loop8
                                            }
                                        }
                                    }
                                    val localswitch8 = parse_statement_helper_22(context.c)
                                    when (localswitch8) {
                                        0 -> {
                                            context.append()
                                            continue@loop7
                                        }
                                        else -> {
                                            break@loop7
                                        }
                                    }
                                }
                                onBLANK_NODE_LABEL()
                                return
                            }
                            else -> {
                                break@error
                            }
                        }
                    }
xxx + ANY null [MyPair(first=46, second=46)]
    
            0x2e
                    onAction(DOT)
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(DECIMAL)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
            0x9,0xa,0xd,0x20
                    0x9,0xa,0xd,0x20*
                            onAction(SKIP_WS_FORCED)
            onAction(SKIP_WS)
            0x42
                    0x41
                            0x53
                                    0x45
                                            onAction(BASE)
            0x50
                    0x52
                            0x45
                                    0x46
                                            0x49
                                                    0x58
                                                            onAction(PREFIX)
            0x40
                    0x62
                            0x61
                                    0x73
                                            0x65
                                                    onAction(BASE2)
                    0x70
                            0x72
                                    0x65
                                            0x66
                                                    0x69
                                                            0x78
                                                                    onAction(PREFIX2)
                    0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a
                            0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a*
                                    ANY start(44)
                                                    
                                                            onAction(LANGTAG)
                                            0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a*
                                                                     end(44)
            0x3c
                    ANY start(1)
                                    
                                            0x3e
                                                    onAction(IRIREF)
                            0x21,in (0x23..0x3b),0x3d,in (0x3f..0x5b),0x5d,0x5f,in (0x61..0x7a),in (0x7e..0x1fffff)
                                     end(1)
                            0x5c
                                    0x75
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(1)
                                    0x55
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(1)
            in (0x30..0x3a),in (0x41..0x5a),in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                    ANY start(2)
                                    
                                            0x3a
                                                    onAction(PNAME_NS)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x3a
                    onAction(PNAME_NS)
            0x5f
                    0x3a
                            in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x2ff),in (0x370..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                    ANY start(3)
                                                    
                                                            onAction(BLANK_NODE_LABEL)
                                            0x2e*
                                                    0x2d,in (0x30..0x39),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(3)
                    ANY start(2)
                                    
                                            onAction(PN_LOCAL)
                            0x2e*
                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                             end(2)
                                    0x25
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                             end(2)
                                    0x5c
                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                     end(2)
            0x61
                    onAction(VERB1)
            0x22
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x22
                                                            onAction(STRING_LITERAL_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(17)
                                                    
                                                            0x22
                                                                    onAction(STRING_LITERAL_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(17)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(17)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(17)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(17)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(20)
                                                                                    
                                                                                            0x22
                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                     end(20)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(20)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(20)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(20)
                                                                                                                    
                                                                                                                            0x22
                                                                                                                                    onAction(STRING_LITERAL_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(20)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(20)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(20)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(20)
                    0x22
                            onAction(STRING_LITERAL_QUOTE)
                            0x22
                                    ANY start(36)
                                                    
                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                     end(36)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(36)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(36)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(36)
                                            0x22
                                                    in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                             end(36)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(36)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(36)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(36)
                                                    0x22
                                                            in (0x0..0x21),in (0x23..0x5b),in (0x5d..0x1fffff)
                                                                     end(36)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(36)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(36)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(36)
                                                            0x22
                                                                    onAction(STRING_LITERAL_LONG_QUOTE)
            0x27
                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                            ANY start(14)
                                            
                                                    0x27
                                                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                                    in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                             end(14)
                                    0x5c
                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                     end(14)
                                            0x75
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                     end(14)
                                            0x55
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                     end(14)
                    0x5c
                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                    ANY start(26)
                                                    
                                                            0x27
                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(26)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(26)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(26)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(26)
                            0x75
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    ANY start(29)
                                                                                    
                                                                                            0x27
                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                     end(29)
                                                                            0x5c
                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                             end(29)
                                                                                    0x75
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(29)
                                                                                    0x55
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                            0x55
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    ANY start(29)
                                                                                                                    
                                                                                                                            0x27
                                                                                                                                    onAction(STRING_LITERAL_SINGLE_QUOTE)
                                                                                                            in (0x0..0x9),in (0xb..0xc),in (0xe..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                                                                     end(29)
                                                                                                            0x5c
                                                                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                                                                             end(29)
                                                                                                                    0x75
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                             end(29)
                                                                                                                    0x55
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                                                                             end(29)
                    0x27
                            onAction(STRING_LITERAL_SINGLE_QUOTE)
                            0x27
                                    ANY start(32)
                                                    
                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                     end(32)
                                            0x5c
                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                             end(32)
                                                    0x75
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                             end(32)
                                                    0x55
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                             end(32)
                                            0x27
                                                    in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                             end(32)
                                                    0x5c
                                                            0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                     end(32)
                                                            0x75
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                     end(32)
                                                            0x55
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                     end(32)
                                                    0x27
                                                            in (0x0..0x26),in (0x28..0x5b),in (0x5d..0x1fffff)
                                                                     end(32)
                                                            0x5c
                                                                    0x22,0x27,0x5c,0x62,0x66,0x6e,0x72,0x74
                                                                             end(32)
                                                                    0x75
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                             end(32)
                                                                    0x55
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                                                                                             end(32)
                                                            0x27
                                                                    onAction(STRING_LITERAL_LONG_SINGLE_QUOTE)
            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                            onAction(INTEGER)
                            0x2e
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DECIMAL)
                                                    0x45,0x65
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                                            0x2b,0x2d
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                            0x45,0x65
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                    onAction(DOUBLE)
                                    0x2b,0x2d
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
            0x2b,0x2d
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                    onAction(INTEGER)
                                    0x2e
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DECIMAL)
                                                            0x45,0x65
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                    onAction(DOUBLE)
                                                                    0x2b,0x2d
                                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                                            onAction(DOUBLE)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
                                    0x45,0x65
                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                            onAction(DOUBLE)
                                            0x2b,0x2d
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                    0x2e
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                            onAction(DECIMAL)
                                            0x45,0x65
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                    onAction(DOUBLE)
                                                    0x2b,0x2d
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39*
                                                                            onAction(DOUBLE)
            0x74
                    0x72
                            0x75
                                    0x65
                                            0x66
                                                    0x61
                                                            0x6c
                                                                    0x73
                                                                            0x65
                                                                                    onAction(BOOLEAN)
            0x3b
                    onAction(PREDICATE_LIST1)
            0x2c
                    onAction(OBJECT_LIST1)
            0x25
                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                    ANY start(43)
                                                    
                                                            onAction(PN_LOCAL)
                                            0x2e*
                                                    0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                             end(43)
                                                    0x25
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                             end(43)
                                                    0x5c
                                                            0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                                     end(43)
            0x5c
                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                            ANY start(43)
                                            
                                                    onAction(PN_LOCAL)
                                    0x2e*
                                            0x2d,in (0x30..0x3a),in (0x41..0x5a),0x5f,in (0x61..0x7a),0xb7,in (0xc0..0xd6),in (0xd8..0xf6),in (0xf8..0x37d),in (0x37f..0x1fff),in (0x200c..0x200d),in (0x203f..0x2040),in (0x2070..0x218f),in (0x2c00..0x2fef),in (0x3001..0xd7ff),in (0xf900..0xfdcf),in (0xfdf0..0xfffd),in (0x10000..0x1fffff)
                                                     end(43)
                                            0x25
                                                    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                            0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46,0x61,0x62,0x63,0x64,0x65,0x66
                                                                     end(43)
                                            0x5c
                                                    0x21,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x3b,0x3d,0x3f,0x40,0x5f,0x7e
                                                             end(43)
            0x5e
                    0x5e
                            onAction(IRI1)
    }
    throw ParserExceptionUnexpectedChar(context)
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_dot_helper_0(c: Int): Int{
 if (c==0x2e) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_ws_helper_1(c: Int): Int{
 if (c<0x9) {
  return 2
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 2
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 2
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else {
  return 2
 }
}
private fun parse_statement_helper_2(c: Int): Int{
 if (c<0x9) {
  return 9
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 9
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 9
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 9
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 9
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 9
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 9
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 9
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 9
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 9
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 9
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 9
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 9
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 9
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 9
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 9
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 9
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 9
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 9
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 9
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 9
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 9
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 9
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_3(c: Int): Int{
 if (c==0x41) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_4(c: Int): Int{
 if (c==0x53) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_5(c: Int): Int{
 if (c==0x45) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_6(c: Int): Int{
 if (c==0x52) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_7(c: Int): Int{
 if (c==0x46) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_8(c: Int): Int{
 if (c==0x49) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_9(c: Int): Int{
 if (c==0x58) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_10(c: Int): Int{
 if (c<0x62) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 2
 } else if (c<=0x70) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_11(c: Int): Int{
 if (c==0x61) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_12(c: Int): Int{
 if (c==0x73) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_13(c: Int): Int{
 if (c==0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_14(c: Int): Int{
 if (c==0x72) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_15(c: Int): Int{
 if (c==0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_16(c: Int): Int{
 if (c==0x69) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_17(c: Int): Int{
 if (c==0x78) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_18(c: Int): Int{
 if (c<0x21) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 2
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x5d) {
  return 0
 } else if (c<0x5f) {
  return 2
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 2
 } else if (c<=0x7a) {
  return 0
 } else if (c<0x7e) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_19(c: Int): Int{
 if (c<0x55) {
  return 2
 } else if (c<=0x55) {
  return 1
 } else if (c<0x75) {
  return 2
 } else if (c<=0x75) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_20(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x46) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x66) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_21(c: Int): Int{
 if (c==0x3e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_22(c: Int): Int{
 if (c<0x2d) {
  return 1
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 1
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 1
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_statement_helper_23(c: Int): Int{
 if (c==0x3a) {
  return 0
 } else {
  return 1
 }
}
private fun parse_statement_helper_24(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xc0) {
  return 1
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 1
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 1
 } else if (c<=0x2ff) {
  return 0
 } else if (c<0x370) {
  return 1
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 1
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 1
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x2070) {
  return 1
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 1
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 1
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 1
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 1
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 1
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 1
 }
}
private fun parse_predicate_helper_25(c: Int): Int{
 if (c<0x9) {
  return 10
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 10
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 10
 } else if (c<=0x20) {
  return 1
 } else if (c<0x2e) {
  return 10
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x3a) {
  return 10
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 10
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 10
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 10
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 10
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 10
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 10
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<0xc0) {
  return 10
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 10
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 10
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 10
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 10
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 10
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 10
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 10
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 10
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 10
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 10
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 10
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 10
 }
}
private fun parse_obj_helper_26(c: Int): Int{
 if (c<0x9) {
  return 15
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 15
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 15
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 15
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 15
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 15
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2d) {
  return 15
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 15
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 15
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 15
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3c) {
  return 15
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 15
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 15
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 15
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 15
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 15
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 15
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 15
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 15
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 15
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 15
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 15
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 15
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 15
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 15
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 15
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 15
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 15
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 15
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_27(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_28(c: Int): Int{
 if (c<0x45) {
  return 1
 } else if (c<=0x45) {
  return 0
 } else if (c<0x65) {
  return 1
 } else if (c<=0x65) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_29(c: Int): Int{
 if (c<0x2b) {
  return 2
 } else if (c<=0x2b) {
  return 1
 } else if (c<0x2d) {
  return 2
 } else if (c<=0x2d) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_30(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_31(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
private fun parse_obj_helper_32(c: Int): Int{
 if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 0
 } else if (c<0x55) {
  return 3
 } else if (c<=0x55) {
  return 2
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 0
 } else if (c<0x62) {
  return 3
 } else if (c<=0x62) {
  return 0
 } else if (c<0x66) {
  return 3
 } else if (c<=0x66) {
  return 0
 } else if (c<0x6e) {
  return 3
 } else if (c<=0x6e) {
  return 0
 } else if (c<0x72) {
  return 3
 } else if (c<=0x72) {
  return 0
 } else if (c<0x74) {
  return 3
 } else if (c<=0x74) {
  return 0
 } else if (c<0x75) {
  return 3
 } else if (c<=0x75) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_33(c: Int): Int{
 if (c==0x22) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_34(c: Int): Int{
 if (c<=0x21) {
  return 0
 } else if (c<0x22) {
  return 3
 } else if (c<=0x22) {
  return 2
 } else if (c<0x23) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_35(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 3
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 3
 } else if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_obj_helper_36(c: Int): Int{
 if (c<=0x9) {
  return 0
 } else if (c<0xb) {
  return 2
 } else if (c<=0xc) {
  return 0
 } else if (c<0xe) {
  return 2
 } else if (c<=0x26) {
  return 0
 } else if (c<0x28) {
  return 2
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 2
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 2
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_37(c: Int): Int{
 if (c==0x27) {
  return 0
 } else {
  return 1
 }
}
private fun parse_obj_helper_38(c: Int): Int{
 if (c<=0x26) {
  return 0
 } else if (c<0x27) {
  return 3
 } else if (c<=0x27) {
  return 2
 } else if (c<0x28) {
  return 3
 } else if (c<=0x5b) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 1
 } else if (c<0x5d) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_39(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_40(c: Int): Int{
 if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else if (c<0x45) {
  return 2
 } else if (c<=0x45) {
  return 1
 } else if (c<0x65) {
  return 2
 } else if (c<=0x65) {
  return 1
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_41(c: Int): Int{
 if (c<0x2e) {
  return 2
 } else if (c<=0x2e) {
  return 1
 } else if (c<0x30) {
  return 2
 } else if (c<=0x39) {
  return 0
 } else {
  return 2
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_42(c: Int): Int{
 if (c==0x75) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_obj_helper_43(c: Int): Int{
 if (c==0x6c) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_helper_44(c: Int): Int{
 if (c<0x9) {
  return 17
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 17
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 17
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 17
 } else if (c<=0x22) {
  return 10
 } else if (c<0x27) {
  return 17
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 17
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 17
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 17
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 17
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 17
 } else if (c<=0x39) {
  return 12
 } else if (c<0x3a) {
  return 17
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 17
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 17
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 17
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 17
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 17
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5f) {
  return 17
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 17
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 17
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 17
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 17
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 17
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 17
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 17
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 17
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 17
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 17
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 17
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 17
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 17
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 17
 }
}
private fun parse_triple_end_or_object_iri_helper_45(c: Int): Int{
 if (c<0x9) {
  return 19
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 19
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 19
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 19
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 19
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 19
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 19
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 19
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 19
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 19
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 19
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 19
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 19
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 19
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 19
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 19
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 19
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5f) {
  return 19
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 19
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 19
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 19
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 19
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 19
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 19
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 19
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 19
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 19
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 19
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 19
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 19
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 19
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 19
 }
}
private fun parse_triple_end_or_object_iri_helper_46(c: Int): Int{
 if (c<0x25) {
  return 3
 } else if (c<=0x25) {
  return 1
 } else if (c<0x2d) {
  return 3
 } else if (c<=0x2d) {
  return 0
 } else if (c<0x30) {
  return 3
 } else if (c<=0x3a) {
  return 0
 } else if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x5c) {
  return 3
 } else if (c<=0x5c) {
  return 2
 } else if (c<0x5f) {
  return 3
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 0
 } else if (c<0xb7) {
  return 3
 } else if (c<=0xb7) {
  return 0
 } else if (c<0xc0) {
  return 3
 } else if (c<=0xd6) {
  return 0
 } else if (c<0xd8) {
  return 3
 } else if (c<=0xf6) {
  return 0
 } else if (c<0xf8) {
  return 3
 } else if (c<=0x37d) {
  return 0
 } else if (c<0x37f) {
  return 3
 } else if (c<=0x1fff) {
  return 0
 } else if (c<0x200c) {
  return 3
 } else if (c<=0x200d) {
  return 0
 } else if (c<0x203f) {
  return 3
 } else if (c<=0x2040) {
  return 0
 } else if (c<0x2070) {
  return 3
 } else if (c<=0x218f) {
  return 0
 } else if (c<0x2c00) {
  return 3
 } else if (c<=0x2fef) {
  return 0
 } else if (c<0x3001) {
  return 3
 } else if (c<=0xd7ff) {
  return 0
 } else if (c<0xf900) {
  return 3
 } else if (c<=0xfdcf) {
  return 0
 } else if (c<0xfdf0) {
  return 3
 } else if (c<=0xfffd) {
  return 0
 } else if (c<0x10000) {
  return 3
 } else if (c<=0x1fffff) {
  return 0
 } else {
  return 3
 }
}
private fun parse_triple_end_or_object_iri_helper_47(c: Int): Int{
 if (c<0x21) {
  return 1
 } else if (c<=0x21) {
  return 0
 } else if (c<0x23) {
  return 1
 } else if (c<=0x2f) {
  return 0
 } else if (c<0x3b) {
  return 1
 } else if (c<=0x3b) {
  return 0
 } else if (c<0x3d) {
  return 1
 } else if (c<=0x3d) {
  return 0
 } else if (c<0x3f) {
  return 1
 } else if (c<=0x40) {
  return 0
 } else if (c<0x5f) {
  return 1
 } else if (c<=0x5f) {
  return 0
 } else if (c<0x7e) {
  return 1
 } else if (c<=0x7e) {
  return 0
 } else {
  return 1
 }
}
private fun parse_triple_end_or_object_string_helper_48(c: Int): Int{
 if (c<0x9) {
  return 20
 } else if (c<=0xa) {
  return 1
 } else if (c<0xd) {
  return 20
 } else if (c<=0xd) {
  return 1
 } else if (c<0x20) {
  return 20
 } else if (c<=0x20) {
  return 1
 } else if (c<0x22) {
  return 20
 } else if (c<=0x22) {
  return 10
 } else if (c<0x25) {
  return 20
 } else if (c<=0x25) {
  return 17
 } else if (c<0x27) {
  return 20
 } else if (c<=0x27) {
  return 11
 } else if (c<0x2b) {
  return 20
 } else if (c<=0x2b) {
  return 13
 } else if (c<0x2c) {
  return 20
 } else if (c<=0x2c) {
  return 16
 } else if (c<0x2d) {
  return 20
 } else if (c<=0x2d) {
  return 13
 } else if (c<0x2e) {
  return 20
 } else if (c<=0x2e) {
  return 0
 } else if (c<0x30) {
  return 20
 } else if (c<=0x39) {
  return 12
 } else if (c<=0x3a) {
  return 6
 } else if (c<=0x3a) {
  return 7
 } else if (c<0x3b) {
  return 20
 } else if (c<=0x3b) {
  return 15
 } else if (c<0x3c) {
  return 20
 } else if (c<=0x3c) {
  return 5
 } else if (c<0x40) {
  return 20
 } else if (c<=0x40) {
  return 4
 } else if (c<0x41) {
  return 20
 } else if (c<=0x5a) {
  return 6
 } else if (c<=0x42) {
  return 2
 } else if (c<0x50) {
  return 20
 } else if (c<=0x50) {
  return 3
 } else if (c<0x5c) {
  return 20
 } else if (c<=0x5c) {
  return 18
 } else if (c<0x5e) {
  return 20
 } else if (c<=0x5e) {
  return 19
 } else if (c<0x5f) {
  return 20
 } else if (c<=0x5f) {
  return 8
 } else if (c<0x61) {
  return 20
 } else if (c<=0x61) {
  return 9
 } else if (c<=0x7a) {
  return 6
 } else if (c<=0x74) {
  return 14
 } else if (c<0xc0) {
  return 20
 } else if (c<=0xd6) {
  return 6
 } else if (c<0xd8) {
  return 20
 } else if (c<=0xf6) {
  return 6
 } else if (c<0xf8) {
  return 20
 } else if (c<=0x2ff) {
  return 6
 } else if (c<0x370) {
  return 20
 } else if (c<=0x37d) {
  return 6
 } else if (c<0x37f) {
  return 20
 } else if (c<=0x1fff) {
  return 6
 } else if (c<0x200c) {
  return 20
 } else if (c<=0x200d) {
  return 6
 } else if (c<0x2070) {
  return 20
 } else if (c<=0x218f) {
  return 6
 } else if (c<0x2c00) {
  return 20
 } else if (c<=0x2fef) {
  return 6
 } else if (c<0x3001) {
  return 20
 } else if (c<=0xd7ff) {
  return 6
 } else if (c<0xf900) {
  return 20
 } else if (c<=0xfdcf) {
  return 6
 } else if (c<0xfdf0) {
  return 20
 } else if (c<=0xfffd) {
  return 6
 } else if (c<0x10000) {
  return 20
 } else if (c<=0x1fffff) {
  return 6
 } else {
  return 20
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_49(c: Int): Int{
 if (c<0x41) {
  return 3
 } else if (c<=0x5a) {
  return 2
 } else if (c<0x61) {
  return 3
 } else if (c<=0x7a) {
  return 2
 } else if (c<=0x62) {
  return 0
 } else if (c<0x70) {
  return 3
 } else if (c<=0x70) {
  return 1
 } else {
  return 3
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_50(c: Int): Int{
 if (c==0x2d) {
  return 0
 } else {
  return 1
 }
}
@Suppress("NOTHING_TO_INLINE") private inline fun parse_triple_end_or_object_string_helper_51(c: Int): Int{
 if (c<0x30) {
  return 1
 } else if (c<=0x39) {
  return 0
 } else if (c<0x41) {
  return 1
 } else if (c<=0x5a) {
  return 0
 } else if (c<0x61) {
  return 1
 } else if (c<=0x7a) {
  return 0
 } else {
  return 1
 }
}
