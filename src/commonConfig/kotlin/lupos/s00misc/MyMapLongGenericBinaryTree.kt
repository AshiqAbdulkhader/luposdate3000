/* this File is autogenerated by generate-buildfile.kts */
/* DO NOT MODIFY DIRECTLY */
package lupos.s00misc
import lupos.s00misc.Coverage
/* Substitutions :: Long,Generic,<Generic>,<Generic>,,<Generic>,Long,Generic */
class MyMapLongGenericBinaryTree<Generic>() {
    @JvmField
    var keys = MySetLongBinaryTree()
    @JvmField
    var values = MyListGeneric<Generic>()
    var size: Int = 0
        get() = keys.size
    inline fun reserve(capacity: Int) {
Coverage.funStart(14595)
        keys.reserve(capacity)
Coverage.statementStart(14596)
        values.reserve(capacity)
Coverage.statementStart(14597)
    }
    constructor(data: Pair<Long, Generic>) : this() {
        set(data.first, data.second)
    }
    inline operator fun get(key: Long): Generic? {
Coverage.funStart(14598)
        var res: Generic? = null
Coverage.statementStart(14599)
        keys.find(key, { res = values[it] })
Coverage.statementStart(14600)
        return res
    }
    inline operator fun set(key: Long, value: Generic) {
Coverage.funStart(14601)
        keys.add(key, { values.add(it, value) }, { values[it] = value })
Coverage.statementStart(14602)
    }
    inline fun getOrCreate(key: Long, crossinline onCreate: () -> Generic): Generic {
Coverage.funStart(14603)
        var value: Generic? = null
Coverage.statementStart(14604)
        keys.add(key, {
Coverage.statementStart(14605)
            value = onCreate()
Coverage.statementStart(14606)
            values.add(it, value!!)
Coverage.statementStart(14607)
        }, {
Coverage.statementStart(14608)
            value = values[it]
Coverage.statementStart(14609)
        })
Coverage.statementStart(14610)
        return value!!
    }
    fun withFastInitializer(action: (MyMapLongGenericBinaryTree<Generic>) -> Unit) = action(this)
    fun appendAssumeSorted(key: Long, value: Generic): Generic {
Coverage.funStart(14611)
        keys.add(key)
Coverage.statementStart(14612)
        values.add(value)
Coverage.statementStart(14613)
        return value
    }
    fun clear() {
Coverage.funStart(14614)
        keys.clear()
Coverage.statementStart(14615)
        values.clear()
Coverage.statementStart(14616)
    }
    inline fun iterator() = MyMapLongGenericBinaryTreeIterator(this)
    inline fun forEach(crossinline action: (Long, Generic) -> Unit) {
Coverage.funStart(14617)
        val iteratorK = keys.iterator()
Coverage.statementStart(14618)
        val iteratorV = values.iterator()
Coverage.statementStart(14619)
        while (iteratorK.hasNext()) {
Coverage.whileLoopStart(14620)
            val k = iteratorK.next()
Coverage.statementStart(14621)
            val v = iteratorV.next()
Coverage.statementStart(14622)
            action(k, v)
Coverage.statementStart(14623)
        }
Coverage.statementStart(14624)
    }
    class MyMapLongGenericBinaryTreeIterator<Generic>(val data: MyMapLongGenericBinaryTree<Generic>) {
        var index = 0
        fun hasNext() = index < data.values.size
        fun next() = data.keys.data[index++]
        fun value() = data.values[index - 1]
    }
    fun safeToFile(filename: String) {
Coverage.funStart(14625)
        throw Exception("not Implemented")
Coverage.statementStart(14646)
    }
}
