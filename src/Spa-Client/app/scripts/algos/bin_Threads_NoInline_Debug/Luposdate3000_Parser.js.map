{"version":3,"file":"Luposdate3000_Parser.js","sources":["generated/_ArraysJs.kt","collections/Collections.kt","runtime/arrayUtils.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/rdf/Dictionary.kt","collections/Maps.kt","generated/_ComparisonsJs.kt","kotlin/collections.kt","../../../../../jsMain/kotlin/lupos/modulename/_ByteArrayHelper.kt","../../../../../commonMain/kotlin/lupos/modulename/_ColumnIteratorQueueExt.kt","../../../../../commonMain/kotlin/lupos/modulename/_DictionaryHelper.kt","kotlin/text/string.kt","text/Strings.kt","../../../../../commonMain/kotlin/lupos/modulename/_MyInputStreamFixedLength.kt","../../../../../commonMain/kotlin/lupos/modulename/_MyStringStream.kt","../../../../../commonMain/kotlin/lupos/modulename/_PartitionExt.kt","../../../../../commonMain/kotlin/lupos/modulename/SanityCheckOff.kt","../../../../../commonMain/kotlin/lupos/modulename/SanityCheckOn.kt","../../../../../commonMain/kotlin/lupos/s00misc/XMLElementFromN3.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/nQuads/NQuads2Parser.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/nQuads/NQuads2ParserGenerated.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/rdf/ID_Triple.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/rdf/Model.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/Runtime.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/sparql1_1/SPARQLHelper.kt","generated/_Arrays.kt","util/Standard.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/sparql1_1/SPARQLParser.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/sparql1_1/SPARQLScanner.kt","text/Char.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/turtle/Turtle2Parser.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/turtle/Turtle2ParserGenerated.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/turtle/Turtle2ParserStateExt.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/turtle/TurtleParserWithDictionary.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/turtle/TurtleParserWithStringTriples.kt","../../../../../commonMain/kotlin/lupos/s02buildSyntaxTree/turtle/TurtleScanner.kt","../../../../../jsMain/kotlin/lupos/modulename/_DateHelper.kt","../../../../../jsMain/kotlin/lupos/modulename/_File.kt","text/StringBuilder.kt","../../../../../jsMain/kotlin/lupos/modulename/_IntegerExt.kt","../../../../../jsMain/kotlin/lupos/modulename/_MyInputStream.kt","../../../../../jsMain/kotlin/lupos/modulename/_MyOutputStream.kt","../../../../../jsMain/kotlin/lupos/modulename/_MyPrintWriter.kt","../../../../../commonMain/kotlin/lupos/modulename/_MyPrintWriter.kt","../../../../../jsMain/kotlin/lupos/modulename/_Platform.kt","../../../../../commonMain/kotlin/lupos/modulename/_Platform.kt","../../../../../jsMain/kotlin/lupos/modulename/MyThreadReadWriteLock.kt","../../../../../jsMain/kotlin/lupos/modulename/ParallelThread.kt","../../../../../jsMain/kotlin/lupos/modulename/ParallelThreadCondition.kt","../../../../../jsMain/kotlin/lupos/modulename/ParallelThreadQueue.kt"],"sourcesContent":["/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    return this.contentDeepEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    return this.contentDeepHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>?.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    return this.contentDeepToString()\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>?.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ByteArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ShortArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun IntArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun LongArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun FloatArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun CharArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ByteArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ShortArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<IntArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this.unsafeCast<Array<Long>>(), fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<FloatArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<DoubleArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<CharArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns the greater of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Byte, b: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Short, b: Short): Short {\n    return Math.max(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Int, b: Int): Int {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"DEPRECATION_ERROR\", \"NOTHING_TO_INLINE\")\npublic actual inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Float, b: Float): Float {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Double, b: Double): Double {\n    return Math.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return Math.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return Math.max(a, b, c)\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, vararg other: T): T {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Byte, vararg other: Byte): Byte {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Short, vararg other: Short): Short {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Int, vararg other: Int): Int {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Long, vararg other: Long): Long {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Float, vararg other: Float): Float {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Double, vararg other: Double): Double {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Byte, b: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Short, b: Short): Short {\n    return Math.min(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Int, b: Int): Int {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"DEPRECATION_ERROR\", \"NOTHING_TO_INLINE\")\npublic actual inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Float, b: Float): Float {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Double, b: Double): Double {\n    return Math.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return Math.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION_ERROR\")\npublic actual inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return Math.min(a, b, c)\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> minOf(a: T, vararg other: T): T {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Byte, vararg other: Byte): Byte {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Short, vararg other: Short): Short {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Int, vararg other: Int): Int {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Long, vararg other: Long): Long {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Float, vararg other: Float): Float {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Double, vararg other: Double): Double {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E> {\n    return ArrayList<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E> {\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}",null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n",null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun IntArray?.contentEquals(other: IntArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun LongArray?.contentEquals(other: LongArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun CharArray?.contentEquals(other: CharArray?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sortWith(reverseOrder(), fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V> Array<out K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ByteArray.associateWith(valueSelector: (Byte) -> V): Map<Byte, V> {\n    val result = LinkedHashMap<Byte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ShortArray.associateWith(valueSelector: (Short) -> V): Map<Short, V> {\n    val result = LinkedHashMap<Short, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> IntArray.associateWith(valueSelector: (Int) -> V): Map<Int, V> {\n    val result = LinkedHashMap<Int, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> LongArray.associateWith(valueSelector: (Long) -> V): Map<Long, V> {\n    val result = LinkedHashMap<Long, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> FloatArray.associateWith(valueSelector: (Float) -> V): Map<Float, V> {\n    val result = LinkedHashMap<Float, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> DoubleArray.associateWith(valueSelector: (Double) -> V): Map<Double, V> {\n    val result = LinkedHashMap<Double, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> BooleanArray.associateWith(valueSelector: (Boolean) -> V): Map<Boolean, V> {\n    val result = LinkedHashMap<Boolean, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> CharArray.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(size.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Byte, in V>> ByteArray.associateWithTo(destination: M, valueSelector: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Short, in V>> ShortArray.associateWithTo(destination: M, valueSelector: (Short) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo(destination: M, valueSelector: (Int) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Long, in V>> LongArray.associateWithTo(destination: M, valueSelector: (Long) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Float, in V>> FloatArray.associateWithTo(destination: M, valueSelector: (Float) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Double, in V>> DoubleArray.associateWithTo(destination: M, valueSelector: (Double) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Boolean, in V>> BooleanArray.associateWithTo(destination: M, valueSelector: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Char, in V>> CharArray.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.flatMapIndexed(transform: (index: Int, Byte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.flatMapIndexed(transform: (index: Int, Short) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.flatMapIndexed(transform: (index: Int, Int) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.flatMapIndexed(transform: (index: Int, Long) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.flatMapIndexed(transform: (index: Int, Float) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.flatMapIndexed(transform: (index: Int, Double) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.flatMapIndexed(transform: (index: Int, Boolean) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, Byte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, Short) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo(destination: C, transform: (index: Int, Int) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapIndexedTo(destination: C, transform: (index: Int, Long) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapIndexedTo(destination: C, transform: (index: Int, Float) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapIndexedTo(destination: C, transform: (index: Int, Double) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapIndexedTo(destination: C, transform: (index: Int, Boolean) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * Among equal elements of the given array, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given array with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    return toCollection(LinkedHashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    return toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    return toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    return toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    return toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    return toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    return toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    return toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    return toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.max(): Byte? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.max(): Short? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.max(): Int? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.max(): Long? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.maxOrNull(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxOrNull(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxOrNull(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxOrNull(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxOrNull(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.maxWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.min(): Byte? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.min(): Short? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.min(): Int? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.min(): Long? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.minOrNull(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minOrNull(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minOrNull(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minOrNull(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minOrNull(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.minWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEach(action: (T) -> Unit): Array<out T> {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEach(action: (Byte) -> Unit): ByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEach(action: (Short) -> Unit): ShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEach(action: (Int) -> Unit): IntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEach(action: (Long) -> Unit): LongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEach(action: (Float) -> Unit): FloatArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEach(action: (Double) -> Unit): DoubleArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEach(action: (Boolean) -> Unit): BooleanArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEach(action: (Char) -> Unit): CharArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEachIndexed(action: (index: Int, T) -> Unit): Array<out T> {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEachIndexed(action: (index: Int, Byte) -> Unit): ByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEachIndexed(action: (index: Int, Short) -> Unit): ShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEachIndexed(action: (index: Int, Int) -> Unit): IntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEachIndexed(action: (index: Int, Long) -> Unit): LongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEachIndexed(action: (index: Int, Float) -> Unit): FloatArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEachIndexed(action: (index: Int, Double) -> Unit): DoubleArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEachIndexed(action: (index: Int, Boolean) -> Unit): BooleanArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEachIndexed(action: (index: Int, Char) -> Unit): CharArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceIndexedOrNull(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceIndexedOrNull(operation: (index: Int, acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceIndexedOrNull(operation: (index: Int, acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceIndexedOrNull(operation: (index: Int, acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceIndexedOrNull(operation: (index: Int, acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceIndexedOrNull(operation: (index: Int, acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceIndexedOrNull(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceRightIndexedOrNull(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceRightIndexedOrNull(operation: (index: Int, Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceRightIndexedOrNull(operation: (index: Int, Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceRightIndexedOrNull(operation: (index: Int, Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceRightIndexedOrNull(operation: (index: Int, Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceRightIndexedOrNull(operation: (index: Int, Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceRightIndexedOrNull(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFold(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFold(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFold(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFold(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFold(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFold(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFold(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CharsKt\")\n\npackage kotlin.text\n\n/**\n * Concatenates this Char and a String.\n *\n * @sample samples.text.Chars.plus\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.plus(other: String): String = this.toString() + other\n\n/**\n * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n *\n * Two characters are considered the same ignoring case if at least one of the following is `true`:\n *   - The two characters are the same (as compared by the == operator)\n *   - Applying the method [toUpperCase] to each character produces the same result\n *   - Applying the method [toLowerCase] to each character produces the same result\n *\n * @sample samples.text.Chars.equals\n */\npublic fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {\n    if (this == other) return true\n    if (!ignoreCase) return false\n\n    if (this.toUpperCase() == other.toUpperCase()) return true\n    if (this.toLowerCase() == other.toLowerCase()) return true\n    return false\n}\n\n/**\n * Returns `true` if this character is a Unicode surrogate code unit.\n */\npublic fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE\n",null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.*\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: String?): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: String?): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder().apply(builderAction).toString()\n}\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder(capacity).apply(builderAction).toString()\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this StringBuilder. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(): StringBuilder = append('\\n')\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharSequence?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: String?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Any?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharArray): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Char): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Boolean): StringBuilder = append(value).appendLine()\n",null,null,null,null,null,null,null,null,null,null,null],"names":[],"mappings":"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AAK,MAAX,C;WACI,K;QACI,SAAS,Y;QADb,K;WAGA,M;QACI,SAAS,a;QADb,K;WAGA,a;QACI,SAAS,oB;QADb,K;WAGA,U;QACI,SAAS,iB;QADb,K;WAGA,O;QACI,SAAS,c;QADb,K;WAGA,K;QACI,SAAS,gB;QADb,K;WAGA,K;QACI,SAAS,gB;QADb,K;WAGA,O;QACI,SAAS,c;QADb,K;WAGA,M;QACI,SAAS,a;QADb,K;WAGA,K;QACI,SAAS,Y;QADb,K;WAGA,M;QACI,SAAS,a;QADb,K;WAGA,O;QACI,SAAS,c;QADb,K;WAGA,O;QACI,SAAS,c;QADb,K;WAGA,Q;QACI,SAAS,e;QADb,K;WAGA,Q;QACI,SAAS,4B;QADb,K;WAGA,Q;QACI,SAAS,e;QADb,K;WAGA,S;QACI,SAAS,6B;QADb,K;WAGA,O;QACI,SAAS,c;QADb,K;WAGA,O;QACI,SAAS,c;QADb,K;WAGA,gB;QACI,SAAS,uB;QADb,K;WAGA,U;QACI,SAAS,iB;QADb,K;WAGA,W;QACI,SAAS,kB;QADb,K;WAGA,S;QACI,SAAS,gB;QADb,K;WAGA,W;QACI,SAAS,kB;QADb,K;WAGA,U;QACI,SAAS,iB;QADb,K;WAGA,M;QACI,SAAS,W;QADb,K;WAGA,O;QACI,SAAS,Y;QADb,K;WAGA,K;QACI,SAAS,Y;QADb,K;WAGA,O;QACI,SAAS,c;QADb,K;WAGA,S;QACI,SAAS,gB;QADb,K;WAGA,S;QACI,SAAS,gB;QADb,K;WAGA,U;QACI,SAAS,iB;QADb,K;WAGA,I;QACI,SAAS,W;QADb,K;WAGA,K;QACI,SAAS,Y;QADb,K;WAGA,M;QACI,SAAS,a;QADb,K;WAGA,S;QACI,SAAS,gB;QADb,K;WAGA,K;QACI,SAAS,Y;QADb,K;WAGA,M;QACI,SAAS,a;QADb,K;WAGA,Q;QACI,SAAS,e;QADb,K;WAGA,Q;QACI,SAAS,e;QADb,K;WAGA,Q;QACI,SAAS,e;QADb,K;WAGA,U;QACI,SAAS,iB;QADb,K;WAGA,I;QACI,SAAS,W;QADb,K;WAGA,S;QACI,SAAS,gB;QADb,K;WAGA,O;QACI,SAAS,c;QADb,K;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"}