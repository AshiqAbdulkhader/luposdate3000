{"version":3,"file":"Luposdate3000_Jena_Wrapper.js","sources":["generated/_ArraysJs.kt","collections/Collections.kt","../../../../../jsMain/kotlin/lupos/modulename/_ByteArrayHelper.kt","../../../../../jsMain/kotlin/lupos/modulename/MyThreadReadWriteLock.kt","../../../../../commonMain/kotlin/lupos/jena/JenaWrapper.kt","../../../../../commonMain/kotlin/lupos/modulename/_ColumnIteratorQueueExt.kt","../../../../../commonMain/kotlin/lupos/modulename/_DictionaryHelper.kt","kotlin/text/string.kt","text/Strings.kt","../../../../../commonMain/kotlin/lupos/modulename/_MyInputStreamFixedLength.kt","../../../../../commonMain/kotlin/lupos/modulename/_MyStringStream.kt","../../../../../commonMain/kotlin/lupos/modulename/_PartitionExt.kt","../../../../../commonMain/kotlin/lupos/modulename/SanityCheckOff.kt","../../../../../commonMain/kotlin/lupos/modulename/SanityCheckOn.kt","../../../../../jsMain/kotlin/lupos/modulename/_DateHelper.kt","../../../../../jsMain/kotlin/lupos/modulename/_File.kt","text/StringBuilder.kt","../../../../../jsMain/kotlin/lupos/modulename/_IntegerExt.kt","../../../../../jsMain/kotlin/lupos/modulename/_MyInputStream.kt","../../../../../jsMain/kotlin/lupos/modulename/_MyOutputStream.kt","../../../../../jsMain/kotlin/lupos/modulename/_MyPrintWriter.kt","../../../../../commonMain/kotlin/lupos/modulename/_MyPrintWriter.kt","../../../../../jsMain/kotlin/lupos/modulename/_Platform.kt","../../../../../commonMain/kotlin/lupos/modulename/_Platform.kt","../../../../../jsMain/kotlin/lupos/modulename/ParallelThread.kt","../../../../../jsMain/kotlin/lupos/modulename/ParallelThreadCondition.kt","../../../../../jsMain/kotlin/lupos/modulename/ParallelThreadQueue.kt"],"sourcesContent":["/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    return this.contentDeepEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    return this.contentDeepHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>?.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    return this.contentDeepToString()\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>?.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ByteArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ShortArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun IntArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun LongArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun FloatArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun CharArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ByteArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ShortArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<IntArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this.unsafeCast<Array<Long>>(), fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<FloatArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<DoubleArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<CharArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n",null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n",null,null,null,null,null,null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.*\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: String?): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: String?): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder().apply(builderAction).toString()\n}\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder(capacity).apply(builderAction).toString()\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this StringBuilder. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(): StringBuilder = append('\\n')\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharSequence?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: String?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Any?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharArray): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Char): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Boolean): StringBuilder = append(value).appendLine()\n",null,null,null,null,null,null,null,null,null,null],"names":[],"mappings":"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"}