{"version":3,"file":"Luposdate3000_Operator_Physical.js","sources":["generated/_ArraysJs.kt","collections/Collections.kt","runtime/arrayUtils.kt","collections/Maps.kt","generated/_Collections.kt","kotlin/collections.kt","text/regex/RegexExtensions.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPMergePartitionCount.kt","collections/MutableCollections.kt","../../../../../jsMain/kotlin/lupos/modulename/_ByteArrayHelper.kt","../../../../../jsMain/kotlin/lupos/modulename/MyThreadReadWriteLock.kt","../../../../../commonMain/kotlin/lupos/modulename/_ColumnIteratorQueueExt.kt","../../../../../commonMain/kotlin/lupos/modulename/_DictionaryHelper.kt","kotlin/text/string.kt","text/Strings.kt","../../../../../commonMain/kotlin/lupos/modulename/_MyInputStreamFixedLength.kt","../../../../../commonMain/kotlin/lupos/modulename/_MyStringStream.kt","../../../../../commonMain/kotlin/lupos/modulename/_PartitionExt.kt","../../../../../commonMain/kotlin/lupos/modulename/SanityCheckOff.kt","../../../../../commonMain/kotlin/lupos/modulename/SanityCheckOn.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/MapKey.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoin.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinCartesianProduct.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinHashMap.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinHashMap_Row.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinMerge.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinMerge_Bundle.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinMerge_Iterator.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinMergeOptional.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinMergeSingleColumn.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinMergeSingleColumn_Iterator.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinWithStore.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPJoinWithStoreExists.kt","generated/_Arrays.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPMinus.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/multiinput/POPUnion.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/noinput/POPEmptyRow.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/noinput/POPGraphOperation.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/noinput/POPModifyData.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/noinput/POPValues.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/noinput/POPValuesImportBase.kt","text/Char.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/noinput/POPValuesImportXML.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/MyConnection.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPChangePartitionOrderedByIntId.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPDistributedReceiveMulti.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPDistributedReceiveMultiCount.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPDistributedReceiveMultiOrdered.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPDistributedReceiveSingle.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPDistributedReceiveSingleCount.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPDistributedSendMulti.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPDistributedSendSingle.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPDistributedSendSingleCount.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPMergePartition.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPMergePartitionOrderedByIntId.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPSplitPartition.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPSplitPartitionFromStore.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPSplitPartitionFromStoreCount.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/partition/POPSplitPartitionPassThrough.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/POPBase.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/modifiers/POPLimit.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/modifiers/POPOffset.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/modifiers/POPReduced.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/POPBind.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/POPDebug.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/POPFilter.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/POPGroup.kt","util/Standard.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/POPGroup_Row.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/POPMakeBooleanResult.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/POPModify.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/POPProjection.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/POPSort.kt","../../../../../commonMain/kotlin/lupos/s09physicalOperators/singleinput/POPVisualisation.kt","../../../../../jsMain/kotlin/lupos/modulename/_DateHelper.kt","../../../../../jsMain/kotlin/lupos/modulename/_File.kt","text/StringBuilder.kt","../../../../../jsMain/kotlin/lupos/modulename/_IntegerExt.kt","../../../../../jsMain/kotlin/lupos/modulename/_MyInputStream.kt","../../../../../jsMain/kotlin/lupos/modulename/_MyOutputStream.kt","../../../../../jsMain/kotlin/lupos/modulename/_MyPrintWriter.kt","../../../../../commonMain/kotlin/lupos/modulename/_MyPrintWriter.kt","../../../../../jsMain/kotlin/lupos/modulename/_Platform.kt","../../../../../commonMain/kotlin/lupos/modulename/_Platform.kt","../../../../../jsMain/kotlin/lupos/modulename/ParallelThread.kt","../../../../../jsMain/kotlin/lupos/modulename/ParallelThreadCondition.kt","../../../../../jsMain/kotlin/lupos/modulename/ParallelThreadQueue.kt","../../../../../jsMain/kotlin/lupos/s09physicalOperators/singleinput/Visualisation.kt","../../../../../commonMain/kotlin/lupos/s00misc/Config-Luposdate3000_Operator_Physical.kt"],"sourcesContent":["/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    return this.contentDeepEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    return this.contentDeepHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>?.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    return this.contentDeepToString()\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>?.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ByteArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ShortArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun IntArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun LongArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun FloatArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun CharArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ByteArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ShortArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<IntArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this.unsafeCast<Array<Long>>(), fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<FloatArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<DoubleArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<CharArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E> {\n    return ArrayList<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E> {\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n",null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n",null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@Suppress(\"DEPRECATION\")\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun IntArray?.contentEquals(other: IntArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun LongArray?.contentEquals(other: LongArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun CharArray?.contentEquals(other: CharArray?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sortWith(reverseOrder(), fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V> Array<out K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ByteArray.associateWith(valueSelector: (Byte) -> V): Map<Byte, V> {\n    val result = LinkedHashMap<Byte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ShortArray.associateWith(valueSelector: (Short) -> V): Map<Short, V> {\n    val result = LinkedHashMap<Short, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> IntArray.associateWith(valueSelector: (Int) -> V): Map<Int, V> {\n    val result = LinkedHashMap<Int, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> LongArray.associateWith(valueSelector: (Long) -> V): Map<Long, V> {\n    val result = LinkedHashMap<Long, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> FloatArray.associateWith(valueSelector: (Float) -> V): Map<Float, V> {\n    val result = LinkedHashMap<Float, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> DoubleArray.associateWith(valueSelector: (Double) -> V): Map<Double, V> {\n    val result = LinkedHashMap<Double, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> BooleanArray.associateWith(valueSelector: (Boolean) -> V): Map<Boolean, V> {\n    val result = LinkedHashMap<Boolean, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> CharArray.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(size.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Byte, in V>> ByteArray.associateWithTo(destination: M, valueSelector: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Short, in V>> ShortArray.associateWithTo(destination: M, valueSelector: (Short) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo(destination: M, valueSelector: (Int) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Long, in V>> LongArray.associateWithTo(destination: M, valueSelector: (Long) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Float, in V>> FloatArray.associateWithTo(destination: M, valueSelector: (Float) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Double, in V>> DoubleArray.associateWithTo(destination: M, valueSelector: (Double) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Boolean, in V>> BooleanArray.associateWithTo(destination: M, valueSelector: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Char, in V>> CharArray.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.flatMapIndexed(transform: (index: Int, Byte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.flatMapIndexed(transform: (index: Int, Short) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.flatMapIndexed(transform: (index: Int, Int) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.flatMapIndexed(transform: (index: Int, Long) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.flatMapIndexed(transform: (index: Int, Float) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.flatMapIndexed(transform: (index: Int, Double) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.flatMapIndexed(transform: (index: Int, Boolean) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, Byte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, Short) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo(destination: C, transform: (index: Int, Int) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapIndexedTo(destination: C, transform: (index: Int, Long) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapIndexedTo(destination: C, transform: (index: Int, Float) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapIndexedTo(destination: C, transform: (index: Int, Double) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapIndexedTo(destination: C, transform: (index: Int, Boolean) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * Among equal elements of the given array, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given array with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    return toCollection(LinkedHashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    return toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    return toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    return toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    return toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    return toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    return toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    return toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    return toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.max(): Byte? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.max(): Short? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.max(): Int? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.max(): Long? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.max(): Float? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.max(): Double? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxOrNull instead.\", ReplaceWith(\"maxOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.max(): Char? {\n    return maxOrNull()\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    return maxByOrNull(selector)\n}\n\n@Deprecated(\"Use maxByOrNull instead.\", ReplaceWith(\"maxByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    return maxByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.maxOrNull(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxOrNull(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxOrNull(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxOrNull(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxOrNull(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    return maxWithOrNull(comparator)\n}\n\n@Deprecated(\"Use maxWithOrNull instead.\", ReplaceWith(\"maxWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    return maxWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.maxWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.min(): Byte? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.min(): Short? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.min(): Int? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.min(): Long? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.min(): Float? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.min(): Double? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minOrNull instead.\", ReplaceWith(\"minOrNull()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.min(): Char? {\n    return minOrNull()\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    return minByOrNull(selector)\n}\n\n@Deprecated(\"Use minByOrNull instead.\", ReplaceWith(\"minByOrNull(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    return minByOrNull(selector)\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.minOrNull(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minOrNull(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minOrNull(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minOrNull(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minOrNull(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    return minWithOrNull(comparator)\n}\n\n@Deprecated(\"Use minWithOrNull instead.\", ReplaceWith(\"minWithOrNull(comparator)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\")\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    return minWithOrNull(comparator)\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.minWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEach(action: (T) -> Unit): Array<out T> {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEach(action: (Byte) -> Unit): ByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEach(action: (Short) -> Unit): ShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEach(action: (Int) -> Unit): IntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEach(action: (Long) -> Unit): LongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEach(action: (Float) -> Unit): FloatArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEach(action: (Double) -> Unit): DoubleArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEach(action: (Boolean) -> Unit): BooleanArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEach(action: (Char) -> Unit): CharArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEachIndexed(action: (index: Int, T) -> Unit): Array<out T> {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEachIndexed(action: (index: Int, Byte) -> Unit): ByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEachIndexed(action: (index: Int, Short) -> Unit): ShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEachIndexed(action: (index: Int, Int) -> Unit): IntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEachIndexed(action: (index: Int, Long) -> Unit): LongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEachIndexed(action: (index: Int, Float) -> Unit): FloatArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEachIndexed(action: (index: Int, Double) -> Unit): DoubleArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEachIndexed(action: (index: Int, Boolean) -> Unit): BooleanArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEachIndexed(action: (index: Int, Char) -> Unit): CharArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceIndexedOrNull(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceIndexedOrNull(operation: (index: Int, acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceIndexedOrNull(operation: (index: Int, acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceIndexedOrNull(operation: (index: Int, acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceIndexedOrNull(operation: (index: Int, acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceIndexedOrNull(operation: (index: Int, acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceIndexedOrNull(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceRightIndexedOrNull(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceRightIndexedOrNull(operation: (index: Int, Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceRightIndexedOrNull(operation: (index: Int, Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceRightIndexedOrNull(operation: (index: Int, Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceRightIndexedOrNull(operation: (index: Int, Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceRightIndexedOrNull(operation: (index: Int, Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceRightIndexedOrNull(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFold(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFold(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFold(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFold(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFold(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFold(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFold(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduce instead.\", ReplaceWith(\"runningReduce(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    return runningReduce(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    return runningReduceIndexed(operation)\n}\n\n@Deprecated(\"Use runningReduceIndexed instead.\", ReplaceWith(\"runningReduceIndexed(operation)\"), level = DeprecationLevel.ERROR)\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    return runningReduceIndexed(operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CharsKt\")\n\npackage kotlin.text\n\n/**\n * Concatenates this Char and a String.\n *\n * @sample samples.text.Chars.plus\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.plus(other: String): String = this.toString() + other\n\n/**\n * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n *\n * Two characters are considered the same ignoring case if at least one of the following is `true`:\n *   - The two characters are the same (as compared by the == operator)\n *   - Applying the method [toUpperCase] to each character produces the same result\n *   - Applying the method [toLowerCase] to each character produces the same result\n *\n * @sample samples.text.Chars.equals\n */\npublic fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {\n    if (this == other) return true\n    if (!ignoreCase) return false\n\n    if (this.toUpperCase() == other.toUpperCase()) return true\n    if (this.toLowerCase() == other.toLowerCase()) return true\n    return false\n}\n\n/**\n * Returns `true` if this character is a Unicode surrogate code unit.\n */\npublic fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.*\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: String?): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: String?): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder().apply(builderAction).toString()\n}\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder(capacity).apply(builderAction).toString()\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this StringBuilder. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(): StringBuilder = append('\\n')\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharSequence?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: String?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Any?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharArray): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Char): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Boolean): StringBuilder = append(value).appendLine()\n",null,null,null,null,null,null,null,null,null,null,null,null],"names":[],"mappings":"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"}